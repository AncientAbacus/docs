"use strict";(self.webpackChunkappcircle_docusaurus=self.webpackChunkappcircle_docusaurus||[]).push([[13021],{87522:(e,t,s)=>{s.r(t),s.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>l,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"continuous-testing/android-testing/running-android-unit-tests","title":"Running Unit Tests","description":"Learn how to run unit tests for Android applications in Appcircle","source":"@site/docs/continuous-testing/android-testing/running-android-unit-tests.md","sourceDirName":"continuous-testing/android-testing","slug":"/continuous-testing/android-testing/running-android-unit-tests","permalink":"/continuous-testing/android-testing/running-android-unit-tests","draft":false,"unlisted":false,"editUrl":"https://github.com/appcircleio/appcircle-docusaurus/tree/master/docs/continuous-testing/android-testing/running-android-unit-tests.md","tags":[{"inline":false,"label":"unit tests","permalink":"/tags/unit-tests","description":"Description for unit tests"},{"inline":false,"label":"android","permalink":"/tags/android","description":"Description for android"},{"inline":false,"label":"testing","permalink":"/tags/testing","description":"Description for testing"},{"inline":false,"label":"continuous testing","permalink":"/tags/continuous-testing","description":"Description for continuous testing"}],"version":"current","sidebarPosition":2,"frontMatter":{"title":"Running Unit Tests","description":"Learn how to run unit tests for Android applications in Appcircle","tags":["unit tests","android","testing","continuous testing"],"sidebar_position":2},"sidebar":"mySidebar","previous":{"title":"Android Testing","permalink":"/continuous-testing/android-testing/"},"next":{"title":"React Native Testing","permalink":"/continuous-testing/react-native-testing/"}}');var r=s(74848),i=s(28453),o=s(69678),a=s(70344);const l={title:"Running Unit Tests",description:"Learn how to run unit tests for Android applications in Appcircle",tags:["unit tests","android","testing","continuous testing"],sidebar_position:2},c="Running Android Unit Tests",d={},u=[{value:"Creating unit tests",id:"creating-unit-tests",level:2},{value:"Running your unit tests in Appcircle",id:"running-your-unit-tests-in-appcircle",level:2},{value:"Generating Test Report",id:"generating-test-report",level:2},{value:"Jacoco Test Coverage",id:"jacoco-test-coverage",level:2},{value:"Showing Test Reports",id:"showing-test-reports",level:2},{value:"Automated Tests",id:"automated-tests",level:2},{value:"FAQ",id:"faq",level:2},{value:"Firebase Errors",id:"firebase-errors",level:3},{value:"Authentication Error: Your credentials are no longer valid.",id:"authentication-error-your-credentials-are-no-longer-valid",level:4}];function p(e){const t={a:"a",admonition:"admonition",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,i.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"running-android-unit-tests",children:"Running Android Unit Tests"})}),"\n",(0,r.jsx)(t.p,{children:"Application tests are essential when it comes to improving and maintaining product quality and performing routine checks which are difficult for humans to perform regularly."}),"\n",(0,r.jsx)(t.p,{children:"Unit tests are usually considered first as they run really fast and are relatively easier to write and measure."}),"\n",(0,r.jsx)(t.p,{children:"We will create a local unit test here as an example and show you how to run the test during your build process."}),"\n",(0,r.jsx)(t.h2,{id:"creating-unit-tests",children:"Creating unit tests"}),"\n",(0,r.jsxs)(t.p,{children:["First, please add test dependencies to your ",(0,r.jsx)(t.code,{children:"build.gradle"})," file:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-groovy",children:"dependencies {\n    // Required for local unit tests (JUnit 4 framework)\n    testImplementation 'junit:junit:4.12'\n}\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Create your test file in your project\u2019s ",(0,r.jsx)(t.code,{children:"module-name/src/test/java/"})," folder."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-java",children:'package com.example.appcircle_sample_android;\nimport org.junit.Test;\nimport static org.junit.Assert.*;\n\n/**\n * Example local unit test, which will execute on the development machine (host).\n *\n * @see <a href="http://d.android.com/tools/testing">Testing documentation</a>\n */\npublic class URLValidatorUnitTest {\n\n    @Test\n    public void invalid_url_test() {\n        boolean isValid = URLValidator.isValid("http:/www.google.com");\n        assertFalse(isValid);\n    }\n\n    @Test\n    public void valid_url_test() {\n        boolean isValid = URLValidator.isValid("https://www.google.com");\n        assertTrue(isValid);\n    }\n}\n'})}),"\n",(0,r.jsx)(t.p,{children:"This example checks to see if the provided URL is valid."}),"\n",(0,r.jsx)(t.h2,{id:"running-your-unit-tests-in-appcircle",children:"Running your unit tests in Appcircle"}),"\n",(0,r.jsx)(t.p,{children:"To run your unit test during the build process, you can simply use a custom script in your build profile."}),"\n",(0,r.jsxs)(t.p,{children:["Simply go to your build workflow and add a custom script after the ",(0,r.jsx)(t.strong,{children:"Sign Application"})," step."]}),"\n",(0,r.jsx)(t.p,{children:"See the following page on our documentation to learn more about creating custom workflow steps:"}),"\n",(0,r.jsx)(a.A,{url:"/workflows/common-workflow-steps/custom-script",children:"Working with Custom Scripts"}),"\n",(0,r.jsx)(t.p,{children:"Add the following Bash script to your custom script step:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cd $AC_REPOSITORY_DIR\n./gradlew testRelease # or you can use 'testDebug'\nmv app/build/reports/tests $AC_OUTPUT_DIR\nmv app/build/test-results $AC_OUTPUT_DIR\n"})}),"\n",(0,r.jsxs)(t.p,{children:["This simple Bash script will trigger your unit test and output the test results to be packed along with your binary files. You will get the test results both in ",(0,r.jsx)(t.code,{children:"xml"})," and ",(0,r.jsx)(t.code,{children:"html"})," formats."]}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/Screenshot 2020-04-28 20.47.05.png"}),"\n",(0,r.jsx)(t.h2,{id:"generating-test-report",children:"Generating Test Report"}),"\n",(0,r.jsxs)(t.p,{children:["Appcircle has ",(0,r.jsx)(t.a,{href:"https://github.com/appcircleio/appcircle-test-report-component",children:"Test Report Component"})," which can show the result of your tests and code coverage in a beautiful UI."]}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/android-unit-test-report-overview.png"}),"\n",(0,r.jsxs)(t.p,{children:["You must add this component ",(0,r.jsx)(t.strong,{children:"after"})," running your tests so that it can parse test results. Your workflow should look like the below."]}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/android-unit-test-workflow.png"}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.a,{href:"https://github.com/appcircleio/appcircle-test-report-component",children:"Test Report Component"})," shows both test and coverage results. This component supports the following test and coverage formats:"]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://junit.org",children:(0,r.jsx)(t.strong,{children:"JUnit"})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://www.jacoco.org",children:(0,r.jsx)(t.strong,{children:"JaCoCo"})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://cobertura.github.io/cobertura",children:(0,r.jsx)(t.strong,{children:"Cobertura"})})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"https://lcov-viewer.netlify.app",children:(0,r.jsx)(t.strong,{children:"lcov.info"})})}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["You must configure the ",(0,r.jsx)(t.strong,{children:"Test Report Component"})," and enter the path of code coverage and test results paths. For example, if you run your tests with an emulator, your files will be generated in the following folders."]}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Code Coverage Files:"})," ",(0,r.jsx)(t.code,{children:"$AC_COVERAGE_RESULT_PATH"})]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Test Results:"})," ",(0,r.jsx)(t.code,{children:"$AC_OUTPUT_DIR/test-results"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"You must configure the component to parse those folders."}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/android-unit-test-report-workflow.png"}),"\n",(0,r.jsxs)(t.admonition,{type:"danger",children:[(0,r.jsxs)(t.p,{children:["There's one important setting that you should change. If any workflow steps fail, Appcircle automatically skips other steps and jumps directly to the Export Build Artifacts step. However, it is possible that some of your tests may fail. ",(0,r.jsx)(t.strong,{children:"If Test Report Component doesn't run, reports will not be generated."})," You should turn on the following toggles so that Test Report Component always runs whether your tests fail or pass."]}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["Always run this step even if the previous steps fail to ",(0,r.jsx)(t.strong,{children:"ON"})]}),"\n",(0,r.jsxs)(t.li,{children:["Continue with the next step even if this step fails to ",(0,r.jsx)(t.strong,{children:"ON"})]}),"\n"]})]}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/android-unit-test-report-steps-on.png"}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsxs)(t.p,{children:["If you're using UI tests with emulators, you must select an Intel device (",(0,r.jsx)(t.strong,{children:"Appcircle Linux Pool (x86_64)"}),") since M-series virtual machines (",(0,r.jsx)(t.strong,{children:"Appcircle Standard macOS Pool (arm64)"}),") don't support nested virtualization. Unit tests can work for both pools."]})}),"\n",(0,r.jsx)(t.h2,{id:"jacoco-test-coverage",children:"Jacoco Test Coverage"}),"\n",(0,r.jsx)(t.p,{children:"If you use the Jacoco tool for test coverage in your project, you can obtain coverage percentages from the test reports Jacoco generates. Jacoco calculates coverage percentages using six different methods, and the coverage percentage will be calculated based on the selected method."}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/be2556-jacocoCoverage2.png"}),"\n",(0,r.jsxs)(t.admonition,{type:"info",children:[(0,r.jsx)(t.p,{children:"These methods range from the most detailed coverage percentage to the most general:"}),(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"INSTRUCTION"}),": JaCoCo counts the smallest unit of single Java bytecode instructions."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"BRANCH"}),": JaCoCo also calculates branch coverage for all if and switch statements."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"COMPLEXITY"}),": JaCoCo also calculates cyclomatic complexity for each non-abstract method and summarizes complexity for classes, packages and groups."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"LINE"}),": For all class files that have been compiled with debug information, coverage information for individual lines can be calculated."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"METHOD"}),": JaCoCo considers a method as executed when at least one instruction has been executed. Since JaCoCo works at the bytecode level, it counts constructors and static initializers as methods."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"CLASS"}),": JaCoCo considers a class as executed when at least one of its methods has been executed. JaCoCo counts constructors and static initializers as methods."]}),"\n"]})]}),"\n",(0,r.jsx)(t.admonition,{type:"danger",children:(0,r.jsx)(t.p,{children:"Each calculation type has different coverage percentages. This is because each type has its own level of detail. Therefore, the coverage percentages are different for each one."})}),"\n",(0,r.jsx)(t.h2,{id:"showing-test-reports",children:"Showing Test Reports"}),"\n",(0,r.jsx)(t.p,{children:"Appcircle can show passing and failing tests in compact UI. If your tests generate artifacts, those artifacts are also displayed with your test cases."}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/ios-unit-test-result-overview.png"}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/ios-unit-test-workflow-ui-detail.png"}),"\n",(0,r.jsx)(o.A,{url:"https://cdn.appcircle.io/docs/assets/ios-unit-test-workflow-coverage.png"}),"\n",(0,r.jsx)(t.h2,{id:"automated-tests",children:"Automated Tests"}),"\n",(0,r.jsx)(t.p,{children:"Appcircle currently supports the following mobile automation testing tools:"}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/workflows/common-workflow-steps/#appium-server",children:"Appium"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/workflows/android-specific-workflow-steps/browserstack-app-automate-espresso",children:"BrowserStack App Automate - Espresso"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/workflows/common-workflow-steps/maestro-cloud-upload",children:"Maestro"})}),"\n",(0,r.jsx)(t.li,{children:(0,r.jsx)(t.a,{href:"/workflows/common-workflow-steps/testinium",children:"Testinium"})}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"Each service allows you to run your tests on real devices, and test scenarios can be started with the artifacts created on Appcircle. Rich reports can be managed by visiting the web site of each service."}),"\n",(0,r.jsx)(t.p,{children:"However, if your tool supports producing the following test report formats, you can also see the test results on Appcircle. Appcircle's Test Report currently supports the following test and coverage formats:"}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Test Format"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["JUnit ",(0,r.jsx)(t.code,{children:".xml"})]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:(0,r.jsx)(t.strong,{children:"Coverage Format"})}),"\n",(0,r.jsxs)(t.ul,{children:["\n",(0,r.jsxs)(t.li,{children:["JaCoCo ",(0,r.jsx)(t.code,{children:".xml"})]}),"\n",(0,r.jsxs)(t.li,{children:["Cobertura ",(0,r.jsx)(t.code,{children:".xml"})]}),"\n",(0,r.jsxs)(t.li,{children:["Lcov ",(0,r.jsx)(t.code,{children:"lcov.info"})]}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["For example, BrowserStack allows you to ",(0,r.jsx)(t.a,{href:"https://www.browserstack.com/docs/app-automate/espresso/view-test-reports",children:"export test results"})," as JUnit. You can get the results of your tests and code coverage results from BrowserStack by using a simple bash script."]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:'curl -u "$AC_BROWSERSTACK_USERNAME:$AC_BROWSERSTACK_ACCESS_KEY" \\\n--output $AC_OUTPUT_DIR/myreport.xml \\\n-X GET "https://api-cloud.browserstack.com/app-automate/espresso/v2/builds/$BUILD_ID/sessions/$SESSION_ID/report"\n\n'})}),"\n",(0,r.jsx)(t.admonition,{type:"info",children:(0,r.jsxs)(t.p,{children:["Appcircle's ",(0,r.jsx)(t.a,{href:"/workflows/android-specific-workflow-steps/browserstack-app-automate-espresso",children:(0,r.jsx)(t.strong,{children:"BrowserStack App Automate - Espresso"})})," step already parses JUnit Test reports. The above code sample is only given as an example."]})}),"\n",(0,r.jsx)(t.h2,{id:"faq",children:"FAQ"}),"\n",(0,r.jsx)(t.h3,{id:"firebase-errors",children:"Firebase Errors"}),"\n",(0,r.jsx)(t.h4,{id:"authentication-error-your-credentials-are-no-longer-valid",children:"Authentication Error: Your credentials are no longer valid."}),"\n",(0,r.jsx)(t.p,{children:"Error detail:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-txt",children:"Error: failed to upload release. Authentication Error: Your credentials are no longer valid. Please run firebase login --reauth\nFor CI servers and headless environments, generate a new token with firebase login:ci\n\u26a0  Unable to fetch the CLI MOTD and remote config.\n"})}),"\n",(0,r.jsx)(t.p,{children:"If you encounter this error message, please review the following two points:"}),"\n",(0,r.jsxs)(t.ol,{children:["\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Verify Your Firebase Credentials"}),": Ensure that your login information is valid, as per the token or service account you are using. You can test it locally using the same token or service account to confirm its authenticity."]}),"\n",(0,r.jsxs)(t.li,{children:[(0,r.jsx)(t.strong,{children:"Check CA Certificates"}),": If you are a ",(0,r.jsx)(t.strong,{children:"self-hosted Appcircle user"})," and you are certain that your credentials are correct, then you should also confirm that your CA certificates are properly defined for NodeJS. You can check CA certificates using the following command:"]}),"\n"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"cat $NODE_EXTRA_CA_CERTS\n"})}),"\n",(0,r.jsx)(t.admonition,{type:"caution",children:(0,r.jsx)(t.p,{children:"Point 2 exclusively applies to users who have opted for self-hosted solutions. For those utilizing Appcircle from the cloud platform (appcircle.io), there is no need to consider this particular point."})})]})}function h(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(p,{...e})}):p(e)}},70344:(e,t,s)=>{s.d(t,{A:()=>c});var n,r,i=s(96540);function o(){return o=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var s=arguments[t];for(var n in s)({}).hasOwnProperty.call(s,n)&&(e[n]=s[n])}return e},o.apply(null,arguments)}const a=e=>{let{title:t,titleId:s,...a}=e;return i.createElement("svg",o({xmlns:"http://www.w3.org/2000/svg",width:24,height:24,fill:"none",stroke:"currentColor",strokeLinecap:"round",strokeLinejoin:"round",strokeWidth:2,className:"feather feather-file-text",viewBox:"0 0 24 24","aria-labelledby":s},a),t?i.createElement("title",{id:s},t):null,n||(n=i.createElement("path",{d:"M14 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V8z"})),r||(r=i.createElement("path",{d:"M14 2v6h6M16 13H8M16 17H8M10 9H8"})))};var l=s(74848);function c(e){let{children:t,url:s}=e;return(0,l.jsxs)("a",{href:s,className:"content-ref-card",children:[(0,l.jsx)(a,{title:"File Icon",className:"file-icon"}),t]})}},69678:(e,t,s)=>{s.d(t,{A:()=>r});s(96540);var n=s(74848);function r(e){let{url:t,alt:s}=e;return(0,n.jsx)("img",{className:"screenshot",src:t,alt:s||"Screenshot"})}},28453:(e,t,s)=>{s.d(t,{R:()=>o,x:()=>a});var n=s(96540);const r={},i=n.createContext(r);function o(e){const t=n.useContext(i);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);