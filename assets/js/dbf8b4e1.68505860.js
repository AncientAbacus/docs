"use strict";(self.webpackChunkappcircle_docusaurus=self.webpackChunkappcircle_docusaurus||[]).push([[57419],{12744:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>u,default:()=>m,frontMatter:()=>c,metadata:()=>i,toc:()=>h});const i=JSON.parse('{"id":"enterprise-app-store/in-app-updates/index","title":"In-app Updates","description":"Streamline app maintenance and enhance user experience by implementing in-app updates through your Enterprise App Store, ensuring seamless and automatic version upgrades.","source":"@site/docs/enterprise-app-store/in-app-updates/index.md","sourceDirName":"enterprise-app-store/in-app-updates","slug":"/enterprise-app-store/in-app-updates/","permalink":"/enterprise-app-store/in-app-updates/","draft":false,"unlisted":false,"editUrl":"https://github.com/appcircleio/appcircle-docusaurus/tree/master/docs/enterprise-app-store/in-app-updates/index.md","tags":[{"inline":false,"label":"enterprise app store","permalink":"/tags/enterprise-app-store","description":"Description for enterprise app store"},{"inline":false,"label":"app distribution","permalink":"/tags/app-distribution","description":"Description for app distribution"},{"inline":false,"label":"app deployment","permalink":"/tags/app-deployment","description":"Description for app deployment"},{"inline":false,"label":"enterprise apps","permalink":"/tags/enterprise-apps","description":"Description for enterprise apps"},{"inline":false,"label":"app store setup","permalink":"/tags/app-store-setup","description":"Description for app store setup"},{"inline":false,"label":"appcircle app store","permalink":"/tags/appcircle-app-store","description":"Description for appcircle app store"},{"inline":false,"label":"in-app updates","permalink":"/tags/in-app-updates","description":"Description for in app updates"}],"version":"current","frontMatter":{"title":"In-app Updates","description":"Streamline app maintenance and enhance user experience by implementing in-app updates through your Enterprise App Store, ensuring seamless and automatic version upgrades.","tags":["enterprise app store","app distribution","app deployment","enterprise apps","app store setup","appcircle app store","in-app updates"]},"sidebar":"mySidebar","previous":{"title":"Portal Reports","permalink":"/enterprise-app-store/enterprise-reports"},"next":{"title":"Publish","permalink":"/publish-module/"}}');var r=t(74848),s=t(28453),a=t(11470),o=t(19365),p=t(21432),l=t(69678);const c={title:"In-app Updates",description:"Streamline app maintenance and enhance user experience by implementing in-app updates through your Enterprise App Store, ensuring seamless and automatic version upgrades.",tags:["enterprise app store","app distribution","app deployment","enterprise apps","app store setup","appcircle app store","in-app updates"]},u=void 0,d={},h=[{value:"What are In-app Updates for Streamlined Update Experience",id:"what-are-in-app-updates-for-streamlined-update-experience",level:2},{value:"Benefits and Examples of In-app Updates",id:"benefits-and-examples-of-in-app-updates",level:2},{value:"Implementing In-App Updates",id:"implementing-in-app-updates",level:2},{value:"Authentication Methods for Obtaining Appcircle Personal API Token",id:"authentication-methods-for-obtaining-appcircle-personal-api-token",level:3},{value:"1. Using a Custom Backend Endpoint",id:"1-using-a-custom-backend-endpoint",level:4},{value:"2. Using Appcircle Services",id:"2-using-appcircle-services",level:4},{value:"Prerequisites for Integration",id:"prerequisites-for-integration",level:2},{value:"Authentication Requirements",id:"authentication-requirements",level:3},{value:"How to Obtain Integrations Parameters",id:"how-to-obtain-integrations-parameters",level:3},{value:"In-app Update Secret",id:"in-app-update-secret",level:4},{value:"Enterprise Portal Prefix",id:"enterprise-portal-prefix",level:4},{value:"Enterprise Portal URL",id:"enterprise-portal-url",level:4},{value:"Enterprise Store Profile Id",id:"enterprise-store-profile-id",level:4},{value:"Retrieving Profile ID from the Enterprise Store Profile Settings",id:"retrieving-profile-id-from-the-enterprise-store-profile-settings",level:5},{value:"How to Extract Your Enterprise Store Profile ID from the URL",id:"how-to-extract-your-enterprise-store-profile-id-from-the-url",level:5},{value:"Retrieving Profile ID Using @appcircle/cli",id:"retrieving-profile-id-using-appcirclecli",level:5},{value:"Authentication for Updates",id:"authentication-for-updates",level:3},{value:"Retrieving Access Token Using Personal API Token",id:"retrieving-access-token-using-personal-api-token",level:4},{value:"Initiating Updates",id:"initiating-updates",level:3},{value:"Retrieving Available App Versions from Your Enterprise Portal",id:"retrieving-available-app-versions-from-your-enterprise-portal",level:4},{value:"Compare Current Version with Fetched App Versions to Identify Updates",id:"compare-current-version-with-fetched-app-versions-to-identify-updates",level:4},{value:"Updating the App",id:"updating-the-app",level:4},{value:"How to Prompt an Alert and Install the Latest Release",id:"how-to-prompt-an-alert-and-install-the-latest-release",level:3}];function g(e){const n={a:"a",admonition:"admonition",code:"code",h2:"h2",h3:"h3",h4:"h4",h5:"h5",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components},{ExternalUrlRef:t}=n;return t||function(e,n){throw new Error("Expected "+(n?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ExternalUrlRef",!0),(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"In-app updates enable applications to deliver and install updates directly within the app, enhancing user experience by minimizing disruption."}),"\n",(0,r.jsx)(n.h2,{id:"what-are-in-app-updates-for-streamlined-update-experience",children:"What are In-app Updates for Streamlined Update Experience"}),"\n",(0,r.jsx)(n.p,{children:"In-app updates offer a seamless method for delivering and installing new versions of an application directly within the app. This eliminates the need for users to manually check for updates, ensuring they receive the latest features and fixes efficiently. This streamlined approach enhances the overall user experience and keeps the app up-to-date."}),"\n",(0,r.jsx)(n.h2,{id:"benefits-and-examples-of-in-app-updates",children:"Benefits and Examples of In-app Updates"}),"\n",(0,r.jsx)(n.p,{children:"In-app updates offer several benefits, including a smoother user experience by enabling seamless updates without requiring users to manually download or install new versions. For example, critical bug fixes and feature enhancements can be automatically applied while the app is running, ensuring users always have access to the latest improvements and functionalities."}),"\n",(0,r.jsx)(n.h2,{id:"implementing-in-app-updates",children:"Implementing In-App Updates"}),"\n",(0,r.jsx)(n.h3,{id:"authentication-methods-for-obtaining-appcircle-personal-api-token",children:"Authentication Methods for Obtaining Appcircle Personal API Token"}),"\n",(0,r.jsx)(n.p,{children:"There are two primary methods to implement authentication and retrieve the Appcircle Personal API token for in-app updates:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Using a Custom Backend Endpoint"}),"\n",(0,r.jsx)(n.li,{children:"Using Appcircle Services"}),"\n"]}),"\n",(0,r.jsx)(n.h4,{id:"1-using-a-custom-backend-endpoint",children:"1. Using a Custom Backend Endpoint"}),"\n",(0,r.jsx)(n.p,{children:"This method involves creating a secure backend service that handles the authentication process and retrieves the Appcircle Personal API token on behalf of your app. Here's how it works:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Your app sends a request to your custom backend endpoint Enterprise App Store profile id with authentication credentials such as email and password."}),"\n",(0,r.jsx)(n.li,{children:"The backend authenticates with Appcircle using profile-specific app secret and obtains the Personal API token."}),"\n",(0,r.jsx)(n.li,{children:"The backend returns the token to your app."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Benefits of this approach:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Enhanced security as sensitive credentials are not stored in the app"}),"\n",(0,r.jsx)(n.li,{children:"Centralized management of authentication"}),"\n",(0,r.jsx)(n.li,{children:"Ability to implement additional security measures on the backend"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.strong,{children:"Sample Backend Project:"})}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.a,{href:"https://github.com/appcircleio/in-app-update-backend-sample",children:(0,r.jsx)(t,{url:"https://github.com/appcircleio/in-app-update-backend-sample",title:"GitHub - appcircleio/in-app-update-backend-sample: Seamless in-app update experience using Appcircle Enterprise App Store",description:"Seamless in-app update experience using Appcircle Enterprise App Store - appcircleio/in-app-update-backend-sample",image:"https://opengraph.githubassets.com/f15a3e458584a488f8175d4346fa3e595d4d2ea194a6105a875802c3470fa1e2/appcircleio/in-app-update-backend-sample"})})}),"\n",(0,r.jsx)(n.h4,{id:"2-using-appcircle-services",children:"2. Using Appcircle Services"}),"\n",(0,r.jsx)(n.p,{children:"This method involves directly using Appcircle's authentication services from within your app. Here's how it works:"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Your app securely stores the profile-specific secret and profile id."}),"\n",(0,r.jsx)(n.li,{children:"The app sends the secret along with the profile ID to Appcircle authentication services."}),"\n",(0,r.jsx)(n.li,{children:"Appcircle validates the credentials and returns the necessary authentication token."}),"\n",(0,r.jsx)(n.li,{children:"Upon successful authentication, the app receives the Personal API token."}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Benefits of this approach:"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"Simpler implementation with fewer components"}),"\n",(0,r.jsx)(n.li,{children:"Reduced backend maintenance"}),"\n",(0,r.jsx)(n.li,{children:"Direct integration with Appcircle services"}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"Both methods have their merits, and the choice depends on your specific security requirements, infrastructure, and development preferences. The custom backend approach offers more control and security, while the direct Appcircle services method provides a more straightforward implementation."}),"\n",(0,r.jsx)(n.h2,{id:"prerequisites-for-integration",children:"Prerequisites for Integration"}),"\n",(0,r.jsx)(n.h3,{id:"authentication-requirements",children:"Authentication Requirements"}),"\n",(0,r.jsxs)(n.p,{children:["To integrate an in-app update experience, you will need the ",(0,r.jsx)(n.strong,{children:"profile secret"}),", the ",(0,r.jsx)(n.strong,{children:"enterprise store prefix"}),", the ",(0,r.jsx)(n.strong,{children:"enterprise store url"}),", and the ",(0,r.jsx)(n.strong,{children:"enterprise store profile id"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-obtain-integrations-parameters",children:"How to Obtain Integrations Parameters"}),"\n",(0,r.jsx)(n.h4,{id:"in-app-update-secret",children:"In-app Update Secret"}),"\n",(0,r.jsx)(n.p,{children:"Steps to Generate a Profile-Specific Secret:"}),"\n",(0,r.jsx)(n.p,{children:"1- Navigate to your enterprise app store profile."}),"\n",(0,r.jsx)(n.p,{children:"2- In the top-right corner, click on the Settings icon."}),"\n",(0,r.jsx)(n.p,{children:"3- Select Generate Secret to create a profile-specific secret."}),"\n",(0,r.jsx)(l.A,{url:"https://cdn.appcircle.io/docs/assets/SP-239-in-app-secret.png"}),"\n",(0,r.jsx)(n.h4,{id:"enterprise-portal-prefix",children:"Enterprise Portal Prefix"}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to the Enterprise App Store module and settings page to find the ",(0,r.jsx)(n.strong,{children:"STORE PREFIX"})," information. You can also modify it if needed."]}),"\n",(0,r.jsx)(l.A,{url:"https://cdn.appcircle.io/docs/assets/BE_4207-Enterprise-Store-Prefix-1.png"}),"\n",(0,r.jsx)(n.h4,{id:"enterprise-portal-url",children:"Enterprise Portal URL"}),"\n",(0,r.jsxs)(n.p,{children:["Navigate to the Enterprise Store module and settings page to find the ",(0,r.jsx)(n.strong,{children:"STORE URL"})," information."]}),"\n",(0,r.jsx)(l.A,{url:"https://cdn.appcircle.io/docs/assets/SP-239-store-url.png"}),"\n",(0,r.jsx)(n.h4,{id:"enterprise-store-profile-id",children:"Enterprise Store Profile Id"}),"\n",(0,r.jsx)(n.p,{children:"You can obtain your Enterprise Store Profile ID from the Profile Settings, the URL or by using the @appcircle/cli."}),"\n",(0,r.jsx)(n.h5,{id:"retrieving-profile-id-from-the-enterprise-store-profile-settings",children:"Retrieving Profile ID from the Enterprise Store Profile Settings"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Navigate to your Enterprise App Store Profile."}),"\n"]}),"\n",(0,r.jsxs)(n.li,{children:["\n",(0,r.jsx)(n.p,{children:"Select the Settings from the top right corner."}),"\n"]}),"\n"]}),"\n",(0,r.jsx)(l.A,{url:"https://cdn.appcircle.io/docs/assets/BE-4225-profile4.png"}),"\n",(0,r.jsxs)(n.ol,{start:"3",children:["\n",(0,r.jsx)(n.li,{children:"Find and copy your Profile ID under the Info tab by clicking the copy button, next to your Profile ID."}),"\n"]}),"\n",(0,r.jsx)(l.A,{url:"https://cdn.appcircle.io/docs/assets/BE-4487.png",alt:"Copy the Profile ID"}),"\n",(0,r.jsx)(n.h5,{id:"how-to-extract-your-enterprise-store-profile-id-from-the-url",children:"How to Extract Your Enterprise Store Profile ID from the URL"}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"Navigate to your Enterprise App Store Profile."}),"\n",(0,r.jsxs)(n.li,{children:["Check the URL, which should be in this format: ",(0,r.jsx)(n.strong,{children:"/enterprise-store/profiles/PROFILE_ID"}),". The PROFILE_ID refers to your specific profile ID."]}),"\n"]}),"\n",(0,r.jsx)(n.h5,{id:"retrieving-profile-id-using-appcirclecli",children:"Retrieving Profile ID Using @appcircle/cli"}),"\n",(0,r.jsx)(n.p,{children:"The upcoming command retrieves the complete list of Enterprise App Store Profiles."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-bash",children:"appcircle enterprise-app-store profile list\n"})}),"\n",(0,r.jsx)(n.h3,{id:"authentication-for-updates",children:"Authentication for Updates"}),"\n",(0,r.jsx)(n.h4,{id:"retrieving-access-token-using-personal-api-token",children:"Retrieving Access Token Using Personal API Token"}),"\n",(0,r.jsx)(n.p,{children:"To fetch app versions and download the binary, you first need to obtain an access token using a Personal API Token (PAT)."}),"\n",(0,r.jsxs)(a.A,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Android",value:"android"},{label:"React Native",value:"react-native"},{label:"MAUI",value:"maui"}],children:[(0,r.jsx)(o.A,{value:"android",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.example.appcircle_sample_android;\n\nimport okhttp3.*;\nimport com.google.gson.Gson;\nimport java.io.IOException;\nimport java.util.concurrent.TimeUnit;\nimport com.google.gson.annotations.SerializedName;\n\nimport org.json.JSONException;\nimport org.json.JSONObject;\n\nclass AuthModel {\n    @SerializedName("access_token")\n    private String accessToken;\n\n    public String getAccessToken() {\n        return accessToken;\n    }\n    public void setAccessToken(String accessToken) {\n        this.accessToken = accessToken;\n    }\n}\n\npublic class AuthService {\n    private static final OkHttpClient client = new OkHttpClient.Builder()\n            .connectTimeout(10, TimeUnit.SECONDS)\n            .readTimeout(30, TimeUnit.SECONDS)\n            .build();\n\n    public static AuthModel getAccessToken() throws IOException {\n        HttpUrl url = new HttpUrl.Builder()\n                .scheme("https")\n                .host(Environment.STORE_URL)\n                .addPathSegment("api")\n                .addPathSegment("auth")\n                .addPathSegment("token")\n                .build();\n\n        JSONObject jsonBody = new JSONObject();\n        try {\n            jsonBody.put("ProfileId", Environment.PROFILE_ID);\n            jsonBody.put("Secret", Environment.SECRET);\n        } catch (JSONException e) {\n            throw new IOException("Error creating JSON body", e);\n        }\n\n        RequestBody body = RequestBody.create(\n                MediaType.parse("application/json; charset=utf-8"),\n                jsonBody.toString()\n        );\n\n        Request request = new Request.Builder()\n                .url(url)\n                .post(body)\n                .addHeader("Content-Type", "application/json")\n                .addHeader("Accept", "application/json")\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) throw new IOException("Unexpected code " + response);\n\n            String responseBody = response.body().string();\n            System.out.println("Response: " + responseBody);\n\n            Gson gson = new Gson();\n            return gson.fromJson(responseBody, AuthModel.class);\n        }\n    }\n}\n\n'})})}),(0,r.jsx)(o.A,{value:"swift",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'extension API {\n    func getAccessToken(secret: String, profileId: String) async throws -> AuthModel {\n        var components = URLComponents()\n        components.scheme = apiConfig.scheme\n        components.host = apiConfig.host\n        components.path = "/api/auth/token"\n        \n        guard let url = components.url else {\n            throw HTTPError.invalidUrl\n        }\n        \n        var request = URLRequest(url: url)\n        request.httpMethod = HTTPMethod.POST.rawValue\n        request.setValue("application/json", forHTTPHeaderField: "Content-Type")\n        request.setValue("application/json", forHTTPHeaderField: "Accept")\n        \n        let parameters: [String: Any] = [\n            "ProfileId": profileId,\n            "Secret": secret\n        ]\n        \n        request.httpBody = try? JSONSerialization.data(withJSONObject: parameters)\n        \n        return try await apiFetcher.request(request: request)\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"react-native",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import axios from 'axios';\nimport Environment from '../Environment';\n\nexport const getACToken = async (profileId: string) => {\n  const endpointURL = `${Environment.STORE_URL}/api/auth/token`;\n\n  const response = await axios.post(\n    endpointURL,\n    {\n      ProfileId: profileId,\n      Secret:\n        Platform.OS === 'ios'\n          ? Environment.IOS_STORE_SECRET\n          : Environment.ANDROID_STORE_SECRET,\n    },\n    {\n      headers: {\n        'Content-Type': 'application/json',\n        accept: 'application/json',\n      },\n    },\n  );\n\n  return response.data;\n};\n"})})}),(0,r.jsxs)(o.A,{value:"maui",children:[(0,r.jsx)(p.A,{language:"csharp",children:'\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing static MAUI_IN_APP.Models.InAppUpdateModel;\n\nnamespace MAUI_IN_APP.Helpers;\n\npublic static class InAppUpdateHelper {\n\n  private static async Task<string> GetACToken(string profileId)\n    {\n    \tvar httpClient = new HttpClient();\n    \tvar endpointUrl = $"{Environment.GetEnvironmentVariable("STORE_URL")}/api/auth/token";\n    \tvar secret = DeviceInfo.Platform == DevicePlatform.iOS\n    \t\t? Environment.GetEnvironmentVariable("IOS_STORE_SECRET")\n    \t\t: Environment.GetEnvironmentVariable("ANDROID_STORE_SECRET");\n\n    \tvar requestBody = new\n    \t{\n    \t\tProfileId = profileId,\n    \t\tSecret = secret\n    \t};\n\n    \tvar json = JsonSerializer.Serialize(requestBody);\n    \tvar content = new StringContent(json, Encoding.UTF8, "application/json");\n\n    \tvar response = await httpClient.PostAsync(endpointUrl, content);\n    \tvar responseData = await response.Content.ReadAsStringAsync();\n    \tvar responseObject = JsonSerializer.Deserialize<TokenResponse>(responseData);\n\n    \t  return responseObject.access_token;\n    }\n\n}\n'}),(0,r.jsx)(p.A,{language:"csharp",children:"\nnamespace MAUI_IN_APP.Models;\n\npublic class InAppUpdateModel\n{\n  public class UpdateResult\n  {\n      public string DownloadUrl { get; set; }\n      public string Version { get; set; }\n  }\n  public class TokenResponse\n  {\n      public string access_token { get; set; }\n  }\n  public class AppVersion\n  {\n      public string Id { get; set; }\n      public string ProfileId { get; set; }\n      public string AppResourceReferenceId { get; set; }\n      public string AppIconResourceReferenceId { get; set; }\n      public string Name { get; set; }\n      public string UniqueName { get; set; }\n      public string SignedCertName { get; set; }\n      public string Version { get; set; }\n      public string VersionCode { get; set; }\n      public int PublishType { get; set; }\n      public DateTime? PublishDate { get; set; }\n      public string PublishDateStr { get; set; }\n      public int PlatformType { get; set; }\n      public string FileName { get; set; }\n      public long FileSize { get; set; }\n      public int DownloadCount { get; set; }\n      public string Summary { get; set; }\n      public string ReleaseNotes { get; set; }\n      public DateTime? LatestNotificationDate { get; set; }\n      public DateTime CreateDate { get; set; }\n      public DateTime? UpdateDate { get; set; }\n      public string BuildId { get; set; }\n      public string AppIconUrl { get; set; }\n      public bool IsDownloadLimitExceeded { get; set; }\n      public int OrganizationDownloadCount { get; set; }\n      public int OrganizationDownloadLimit { get; set; }\n  }\n  public class AppVersionsResponse\n  {\n      public List<AppVersion> data { get; set; }\n  }\n\n  public enum PublishType\n  {\n      NotPublished = 0,\n      Beta,\n      Live,\n  }\n}\n"})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"For Android, omit https and provide only your enterprise store domain, such as appcircle.store.appcircle.io."})}),"\n",(0,r.jsx)(n.h3,{id:"initiating-updates",children:"Initiating Updates"}),"\n",(0,r.jsx)(n.h4,{id:"retrieving-available-app-versions-from-your-enterprise-portal",children:"Retrieving Available App Versions from Your Enterprise Portal"}),"\n",(0,r.jsx)(n.p,{children:"Fetch all available versions and compare them with the current version to determine if an update is required."}),"\n",(0,r.jsxs)(a.A,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Android",value:"android"},{label:"React Native",value:"react-native"},{label:"MAUI",value:"maui"}],children:[(0,r.jsx)(o.A,{value:"android",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'package com.example.appcircle_sample_android;\n\nimport okhttp3.Request;\nimport okhttp3.OkHttpClient;\nimport okhttp3.Response;\nimport okhttp3.HttpUrl;\nimport com.google.gson.Gson;\nimport com.google.gson.JsonArray;\nimport com.google.gson.JsonObject;\nimport com.google.gson.JsonParser;\nimport com.google.gson.reflect.TypeToken;\nimport java.io.IOException;\nimport java.lang.reflect.Type;\nimport java.util.List;\n\nclass AppVersion {\n    private String id;\n    private String version;\n    private Integer publishType;\n\n    public String getId() {\n        return id;\n    }\n\n    public void setId(String id) {\n        this.id = id;\n    }\n\n    public String getVersion() {\n        return version;\n    }\n\n    public void setVersion(String version) {\n        this.version = version;\n    }\n\n    public Integer getPublishType() {\n        return publishType;\n    }\n\n    public void setPublishType(Integer publishType) {\n        this.publishType = publishType;\n    }\n}\n\npublic class AppService {\n    private static final String BASE_URL = "https://api.appcircle.io";\n    private final OkHttpClient client = new OkHttpClient();\n    private final Gson gson = new Gson();\n\n    public List<AppVersion> getAppVersions(String accessToken, String profileId) throws IOException {\n        HttpUrl url = HttpUrl.parse("https://" + Environment.STORE_URL + "/api/app-versions");\n\n        if (url == null) {\n            throw new IOException("Invalid URL");\n        }\n\n        Request request = new Request.Builder()\n                .url(url)\n                .get()\n                .addHeader("Accept", "*/*")\n                .addHeader("Authorization", "Bearer " + accessToken)\n                .build();\n\n        try (Response response = client.newCall(request).execute()) {\n            if (!response.isSuccessful()) {\n                throw new IOException("Unexpected code " + response);\n            }\n\n            String responseBody = response.body().string();\n            System.out.println("Response: " + responseBody); // For debugging\n\n            JsonObject jsonObject = JsonParser.parseString(responseBody).getAsJsonObject();\n            JsonArray dataArray = jsonObject.getAsJsonArray("data");\n\n            Type listType = new TypeToken<List<AppVersion>>() {}.getType();\n            return gson.fromJson(dataArray, listType);\n        }\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"swift",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'extension API {\n    func getAppVersions(accessToken: String) async throws -> [AppVersion] {\n        var components = URLComponents()\n        components.scheme = apiConfig.scheme\n        components.host = apiConfig.host\n        components.path = "/api/app-versions"\n        guard let url = components.url else {\n            throw HTTPError.invalidUrl\n        }\n        var request = URLRequest(url: url)\n        request.httpMethod = HTTPMethod.GET.rawValue\n        request.setValue("*/*", forHTTPHeaderField: "Accept")\n        request.setValue("Bearer \\(accessToken)", forHTTPHeaderField: "Authorization")\n\n        return try await apiFetcher.request(request: request)\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"react-native",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const getAppVersions = async (accessToken: string) => {\n  const url = `${Environment.STORE_URL}/api/app-versions`;\n\n  try {\n    const response = await axios.get(url, {\n      headers: {\n        Accept: '*/*',\n        Authorization: `Bearer ${accessToken}`,\n      },\n    });\n\n    return response.data.data;\n  } catch (error) {\n    console.error('Failed to get app versions:', error);\n  }\n};\n"})})}),(0,r.jsxs)(o.A,{value:"maui",children:[(0,r.jsx)(p.A,{language:"csharp",children:'\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing static MAUI_IN_APP.Models.InAppUpdateModel;\n\nnamespace MAUI_IN_APP.Helpers;\n\npublic static class InAppUpdateHelper {\n\n    private static async Task<List<AppVersion>> GetAppVersions(string accessToken)\n    {\n        var url = $"{Environment.GetEnvironmentVariable("STORE_URL") }/api/app-versions";\n        var options = new JsonSerializerOptions\n        {\n        \tPropertyNameCaseInsensitive = true,\n        \tDefaultIgnoreCondition = System.Text.Json.Serialization.JsonIgnoreCondition.WhenWritingNull\n        };\n        using (var httpClient = new HttpClient())\n        {\n        \thttpClient.DefaultRequestHeaders.Accept.Add(new System.Net.Http.Headers.MediaTypeWithQualityHeaderValue("*/*"));\n        \thttpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", accessToken);\n\n        \tvar response = await httpClient.GetAsync(url);\n        \tvar jsonResponse = await response.Content.ReadAsStringAsync();\n        \tvar responseData = JsonSerializer.Deserialize<AppVersionsResponse>(jsonResponse,options);\n        \treturn responseData.data;\n        }\n    }\n\n}\n'}),(0,r.jsx)(p.A,{language:"csharp",children:"\nnamespace MAUI_IN_APP.Models;\n\npublic class InAppUpdateModel\n{\n  public class UpdateResult\n  {\n      public string DownloadUrl { get; set; }\n      public string Version { get; set; }\n  }\n  public class TokenResponse\n  {\n      public string access_token { get; set; }\n  }\n  public class AppVersion\n  {\n      public string Id { get; set; }\n      public string ProfileId { get; set; }\n      public string AppResourceReferenceId { get; set; }\n      public string AppIconResourceReferenceId { get; set; }\n      public string Name { get; set; }\n      public string UniqueName { get; set; }\n      public string SignedCertName { get; set; }\n      public string Version { get; set; }\n      public string VersionCode { get; set; }\n      public int PublishType { get; set; }\n      public DateTime? PublishDate { get; set; }\n      public string PublishDateStr { get; set; }\n      public int PlatformType { get; set; }\n      public string FileName { get; set; }\n      public long FileSize { get; set; }\n      public int DownloadCount { get; set; }\n      public string Summary { get; set; }\n      public string ReleaseNotes { get; set; }\n      public DateTime? LatestNotificationDate { get; set; }\n      public DateTime CreateDate { get; set; }\n      public DateTime? UpdateDate { get; set; }\n      public string BuildId { get; set; }\n      public string AppIconUrl { get; set; }\n      public bool IsDownloadLimitExceeded { get; set; }\n      public int OrganizationDownloadCount { get; set; }\n      public int OrganizationDownloadLimit { get; set; }\n  }\n  public class AppVersionsResponse\n  {\n      public List<AppVersion> data { get; set; }\n  }\n\n  public enum PublishType\n  {\n      NotPublished = 0,\n      Beta,\n      Live,\n  }\n}\n"})]})]}),"\n",(0,r.jsx)(n.h4,{id:"compare-current-version-with-fetched-app-versions-to-identify-updates",children:"Compare Current Version with Fetched App Versions to Identify Updates"}),"\n",(0,r.jsx)(n.p,{children:"Compare the current version with the fetched versions to identify the latest release. Configuration options can be adjusted to determine which version is considered the latest."}),"\n",(0,r.jsxs)(a.A,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Android",value:"android"},{label:"React Native",value:"react-native"},{label:"MAUI",value:"maui"}],children:[(0,r.jsx)(o.A,{value:"android",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:"import androidx.annotation.Nullable;\nimport java.util.List;\nimport java.util.ArrayList;\n\n/*\n    You can implement your custom update check mechanism within this function.\n    Currently, we convert the version to an integer and compare it with the 'CFBundleShortVersionString'.\n    You may want to check other datas about the app version to write the update control mechanism please check\n    /v2/profiles/{profileId}/app-versions at https://api.appcircle.io/openapi/index.html?urls.primaryName=store\n*/\npublic class VersionUtils {\n    private List<Integer> versionComponents(String version) {\n        List<Integer> components = new ArrayList<>();\n        String[] parts = version.split(\"\\\\.\");\n        for (String part : parts) {\n            try {\n                components.add(Integer.parseInt(part));\n            } catch (NumberFormatException e) {\n                e.printStackTrace();\n            }\n        }\n        return components;\n    }\n\n    public @Nullable AppVersion getLatestVersion(String currentVersion, List<AppVersion> appVersions) {\n        AppVersion latestAppVersion = null;\n        List<Integer> currentComponents = versionComponents(currentVersion);\n\n        for (AppVersion app : appVersions) {\n            List<Integer> latestComponents = versionComponents(app.getVersion());\n            boolean isNewerVersion = false;\n\n            for (int i = 0; i < Math.min(currentComponents.size(), latestComponents.size()); i++) {\n                int current = currentComponents.get(i);\n                int latest = latestComponents.get(i);\n                if (latest > current && app.getPublishType() != 0) {\n                    isNewerVersion = true;\n                    break;\n                } else if (latest < current) {\n                    break;\n                }\n            }\n\n            if (isNewerVersion) {\n                latestAppVersion = app;\n            }\n        }\n\n        return latestAppVersion;\n    }\n}\n\n"})})}),(0,r.jsx)(o.A,{value:"swift",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:"/*\n    You can implement your custom update check mechanism within this function.\n    Currently, we convert the version to an integer and compare it with the 'CFBundleShortVersionString'.\n    You may want to check other datas about the app version to write the update control mechanism please check\n    /v2/profiles/{profileId}/app-versions at https://api.appcircle.io/openapi/index.html?urls.primaryName=store\n*/\nprivate func getLatestVersion(currentVersion: String, appVersions: [AppVersion]) -> AppVersion? {\n    var latestAppVersion: AppVersion?\n    let currentComponents = versionComponents(from: currentVersion)\n    \n    // Helper function to convert version string into an array of integers\n    func versionComponents(from version: String) -> [Int] {\n        return version.split(separator: \".\").compactMap { Int($0) }\n    }\n    \n    \n    appVersions.forEach { app in\n        // Convert versions to arrays of integers\n        let latestComponents = versionComponents(from: app.version)\n        \n        // Compare versions component by component\n        for (current, latest) in zip(currentComponents, latestComponents) {\n            // You can control to update None, Beta or Live publish types you have selected on Appcircle Enterprise Portal\n            if (latest > current && app.publishType != 0) {\n                latestAppVersion = app\n            }\n            \n        }\n    }\n    \n    return latestAppVersion\n}\n"})})}),(0,r.jsx)(o.A,{value:"react-native",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import {Platform} from 'react-native';\n\ninterface AppVersion {\n  id: string;\n  version: string;\n  publishType: number;\n}\n\n/*\n    You can implement your custom update check mechanism within this function.\n    Currently, we convert the version to an integer and compare it with the 'CFBundleShortVersionString'.\n    You may want to check other datas about the app version to write the update control mechanism please check\n    /v2/profiles/{profileId}/app-versions at https://api.appcircle.io/openapi/index.html?urls.primaryName=store\n*/\nconst getLatestVersion = (\n  currentVersion: string,\n  appVersions: AppVersion[],\n): AppVersion | undefined => {\n  let latestAppVersion: AppVersion | undefined;\n  // Helper function to convert version string into an array of integers\n  const versionComponents = (version: string): number[] => {\n    return version\n      .split('.')\n      .map(Number)\n      .filter(num => !isNaN(num));\n  };\n\n  const currentComponents = versionComponents(currentVersion);\n\n  appVersions.forEach(app => {\n    // Convert versions to arrays of integers\n    const latestComponents = versionComponents(app.version);\n\n    // Compare versions component by component\n    for (\n      let i = 0;\n      i < Math.min(currentComponents.length, latestComponents.length);\n      i++\n    ) {\n      const current = currentComponents[i];\n      const latest = latestComponents[i];\n\n      // You can control to update None, Beta or Live publish types you have selected on Appcircle Enterprise Portal\n      if (latest > current && app.publishType !== 0) {\n        latestAppVersion = app;\n      }\n    }\n  });\n\n  return latestAppVersion;\n};\n"})})}),(0,r.jsxs)(o.A,{value:"maui",children:[(0,r.jsx)(p.A,{language:"csharp",children:"\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing static MAUI_IN_APP.Models.InAppUpdateModel;\n\nnamespace MAUI_IN_APP.Helpers;\n\npublic static class InAppUpdateHelper {\n\n    /*\n    You can implement your custom update check mechanism within this function.\n    Currently, we convert the version to an integer and compare it with the 'CFBundleShortVersionString'.\n    You may want to check other datas about the app version to write the update control mechanism please check\n    /v2/profiles/{profileId}/app-versions at https://api.appcircle.io/openapi/index.html?urls.primaryName=store\n    */\n    public static AppVersion GetLatestVersion(string currentVersion, List<AppVersion> appVersions)\n    {\n    \tAppVersion latestAppVersion = null;\n\n    \t// Helper function to convert version string into an array of integers\n    \tint[] VersionComponents(string version)\n    \t{\n    \t\treturn version\n    \t\t\t.Split('.')\n    \t\t\t.Select(part => int.TryParse(part, out int num) ? num : (int?)null)\n    \t\t\t.Where(num => num.HasValue)\n    \t\t\t.Select(num => num.Value)\n    \t\t\t.ToArray();\n    \t}\n    \tvar currentComponents = VersionComponents(currentVersion);\n\n    \tforeach (var app in appVersions)\n    \t{\n    \t\t// Convert versions to arrays of integers\n    \t\tvar latestComponents = VersionComponents(app.Version);\n\n    \t\t// Compare versions component by component\n    \t\tfor (int i = 0; i < Math.Min(currentComponents.Length, latestComponents.Length); i++)\n    \t\t{\n    \t\t\tvar current = currentComponents[i];\n    \t\t\tvar latest = latestComponents[i];\n\n    \t\t\t// You can control to update None, Beta or Live publish types you have selected on Appcircle Enterprise Portal\n    \t\t\tif (latest > current && app.PublishType == (int)PublishType.Live)\n    \t\t\t{\n    \t\t\t\tlatestAppVersion = app;\n    \t\t\t\tbreak; // Assuming once we find a valid version, we don't need to check further.\n    \t\t\t}\n    \t\t}\n    \t}\n\n    \treturn latestAppVersion;\n    }\n\n}\n"}),(0,r.jsx)(p.A,{language:"csharp",children:"\nnamespace MAUI_IN_APP.Models;\n\npublic class InAppUpdateModel\n{\n  public class UpdateResult\n  {\n      public string DownloadUrl { get; set; }\n      public string Version { get; set; }\n  }\n  public class TokenResponse\n  {\n      public string access_token { get; set; }\n  }\n  public class AppVersion\n  {\n      public string Id { get; set; }\n      public string ProfileId { get; set; }\n      public string AppResourceReferenceId { get; set; }\n      public string AppIconResourceReferenceId { get; set; }\n      public string Name { get; set; }\n      public string UniqueName { get; set; }\n      public string SignedCertName { get; set; }\n      public string Version { get; set; }\n      public string VersionCode { get; set; }\n      public int PublishType { get; set; }\n      public DateTime? PublishDate { get; set; }\n      public string PublishDateStr { get; set; }\n      public int PlatformType { get; set; }\n      public string FileName { get; set; }\n      public long FileSize { get; set; }\n      public int DownloadCount { get; set; }\n      public string Summary { get; set; }\n      public string ReleaseNotes { get; set; }\n      public DateTime? LatestNotificationDate { get; set; }\n      public DateTime CreateDate { get; set; }\n      public DateTime? UpdateDate { get; set; }\n      public string BuildId { get; set; }\n      public string AppIconUrl { get; set; }\n      public bool IsDownloadLimitExceeded { get; set; }\n      public int OrganizationDownloadCount { get; set; }\n      public int OrganizationDownloadLimit { get; set; }\n  }\n  public class AppVersionsResponse\n  {\n      public List<AppVersion> data { get; set; }\n  }\n\n  public enum PublishType\n  {\n      NotPublished = 0,\n      Beta,\n      Live,\n  }\n}\n"})]})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsxs)(n.p,{children:["The code above compares major versions. For instance, if the current app version is 1.0 and the latest available version is 1.1, it ",(0,r.jsx)(n.strong,{children:"won't"})," be considered an update. However, if the latest available version is 2.0, it will be treated as an update in your enterprise portal. You can configure this logic based on your business requirements."]})}),"\n",(0,r.jsx)(n.h4,{id:"updating-the-app",children:"Updating the App"}),"\n",(0,r.jsx)(n.p,{children:"If a newer version is available, generate the platform-specific download URL and return it for background opening later."}),"\n",(0,r.jsxs)(a.A,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Android",value:"android"},{label:"React Native",value:"react-native"},{label:"MAUI",value:"maui"}],children:[(0,r.jsx)(o.A,{value:"android",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'public String getAppVersionName() {\n    try {\n        PackageInfo pInfo = this.getPackageManager().getPackageInfo(getPackageName(), 0);\n        return  pInfo.versionName;\n    } catch (PackageManager.NameNotFoundException e) {\n        e.printStackTrace();\n    }\n    return "NOT_FOUND";\n}\n\nprivate class GetAccessTokenTask extends AsyncTask<String, Void, AuthModel> {\n    @Override\n    protected AuthModel doInBackground(String... params) {\n        try {\n            AuthModel response = AuthService.getAccessToken();\n            fetchAppVersions(response.getAccessToken(), Environment.PROFILE_ID);\n\n            return response;\n        } catch (IOException e) {\n            e.printStackTrace();\n            return null;\n        }\n    }\n}\n\nprivate void fetchAppVersions(final String accessToken, final String profileId) {\n    new Thread(new Runnable() {\n        @Override\n        public void run() {\n            try {\n                final List<AppVersion> appVersions = appService.getAppVersions(accessToken, profileId);\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        String versionName = getAppVersionName();\n\n                        if (versionName != null) {\n                            VersionUtils versionUtils = new VersionUtils();\n\n                            @Nullable  AppVersion latestVersion = versionUtils.getLatestVersion(versionName, appVersions);\n                            if (latestVersion != null) {\n                                showUpdateDialog(Environment.STORE_PREFIX, profileId, latestVersion, accessToken, "USER_EMAIL");\n                            }\n                        } else {\n                            Log.d("MainActivity", "Current Version Not Found");\n                        }\n                    }\n                });\n            } catch (final IOException e) {\n                e.printStackTrace();\n                runOnUiThread(new Runnable() {\n                    @Override\n                    public void run() {\n                        Log.e("APIError", "Error fetching app versions", e);\n                    }\n                });\n            }\n        }\n    }).start();\n}\n\n'})})}),(0,r.jsx)(o.A,{value:"swift",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'func checkForUpdate(secret: String, profileId: String, storeURL: String, userEmail: String) async throws -> URL? {\n    do {\n        let authResponse = try await self.authApi.getAccessToken(secret: secret, profileId: profileId)\n        let appVersions = try await self.api.getAppVersions(accessToken: authResponse.accessToken)\n        let bundle = Bundle.main\n        let currentVersion = bundle.infoDictionary?["CFBundleShortVersionString"] as? String\n        guard let currentVersion = currentVersion else {\n            print("\'CFBundleShortVersionString\' Version Could Not found")\n            return nil\n        }\n        \n        guard let availableVersion = getLatestVersion(currentVersion: currentVersion, appVersions: appVersions) else {\n            print("App is up to date!")\n            return nil\n        }\n        \n        guard let downloadURL  = URL(string: "itms-services://?action=download-manifest&url=https://\\(storeURL)/api/app-versions/\\(availableVersion.id)/download-version/\\(authResponse.accessToken)/user/\\(userEmail)") else {\n            print("Latest Version URL could not created")\n            return nil\n        }\n        \n        return downloadURL\n    } catch {\n        print(error)\n        return nil\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"react-native",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"export const checkForUpdate = async (params: {\n  iOSProfileId: string;\n  androidProfileId: string;\n  currentVersion: string;\n  userEmail: string;\n}): Promise<{updateURL: string; version: string} | undefined> => {\n  try {\n    const {access_token} = await getACToken(\n      Platform.OS === 'ios' ? params.iOSProfileId : params.androidProfileId,\n    );\n\n    const appVersions = await getAppVersions(access_token);\n\n    const latestVersion = getLatestVersion(params.currentVersion, appVersions);\n    if (latestVersion) {\n      const downloadUrl = createDownloadUrl(\n        latestVersion.id,\n        access_token,\n        params.userEmail,\n      );\n\n      if (!downloadUrl) {\n        console.error('Failed to create download URL');\n        return undefined;\n      }\n\n      return {\n        updateURL: downloadUrl,\n        version: latestVersion.version,\n      };\n    }\n  } catch (error) {\n    console.log(error.response);\n    console.error('Failed to determine if an update is available', error);\n  }\n};\n\nconst createDownloadUrl = (\n  availableVersionId: string,\n  accessToken: string,\n  email: string,\n): string | null => {\n  const baseUrl = `${Environments.STORE_URL}/api/app-versions/${availableVersionId}/download-version/${accessToken}/user/${email}`;\n  const downloadUrl = `itms-services://?action=download-manifest&url=${baseUrl}`;\n\n  try {\n    return Platform.OS === 'ios' ? downloadUrl : baseUrl;\n  } catch {\n    console.error('Latest Version URL could not be created');\n    return null;\n  }\n};\n"})})}),(0,r.jsxs)(o.A,{value:"maui",children:[(0,r.jsx)(p.A,{language:"csharp",children:'\nusing System.Net.Http;\nusing System.Text;\nusing System.Text.Json;\nusing System.Threading.Tasks;\nusing static MAUI_IN_APP.Models.InAppUpdateModel;\n\nnamespace MAUI_IN_APP.Helpers;\n\npublic static class InAppUpdateHelper {\n\n    public static async Task<UpdateResult> CheckForUpdate(string currentVersion, string userEmail)\n    {\n    \tvar profileId = DeviceInfo.Platform == DevicePlatform.iOS ?\n    \t\tEnvironment.GetEnvironmentVariable("IOS_PROFILE_ID") :\n    \t\tEnvironment.GetEnvironmentVariable("ANDROID_PROFILE_ID");\n    \tif (profileId != null)\n    \t{\n    \t\tvar accessToken = await GetACToken(profileId);\n    \t\tvar appVersions = await GetAppVersions(accessToken);\n    \t\tvar latestVersion = GetLatestVersion(currentVersion, appVersions);\n    \t\tif (latestVersion != null)\n    \t\t{\n    \t\t\tvar downloadUrl = CreateDownloadUrl(latestVersion.Id,accessToken,userEmail);\n    \t\t\tif (downloadUrl == null)\n    \t\t\t{\n    \t\t\t\treturn null;\n    \t\t\t}\n\n    \t\t\treturn new UpdateResult\n    \t\t\t{\n    \t\t\t\tDownloadUrl = downloadUrl,\n    \t\t\t\tVersion = latestVersion.Version\n    \t\t\t};\n    \t\t}\n    \t}\n\n    \treturn null;\n    }\n\n  public static string CreateDownloadUrl(string availableVersionId, string accessToken, string email)\n    {\n    \tvar baseUrl = $"{Environment.GetEnvironmentVariable("STORE_URL")}/api/app-versions/{availableVersionId}/download-version/{accessToken}/user/{email}";\n    \tvar downloadUrl = $"itms-services://?action=download-manifest&url={Uri.EscapeDataString(baseUrl)}";\n    \ttry\n    \t{\n    \t\t// Assuming you have a way to determine the platform\n    \t\tvar isIos = DeviceInfo.Platform == DevicePlatform.iOS;\n    \t\treturn isIos ? downloadUrl : baseUrl;\n    \t}\n    \tcatch (Exception)\n    \t{\n    \t\tConsole.WriteLine("Latest Version URL could not be created");\n    \t\treturn null;\n    \t}\n    }\n\n}\n'}),(0,r.jsx)(p.A,{language:"csharp",children:"\nnamespace MAUI_IN_APP.Models;\n\npublic class InAppUpdateModel\n{\n  public class UpdateResult\n  {\n      public string DownloadUrl { get; set; }\n      public string Version { get; set; }\n  }\n  public class TokenResponse\n  {\n      public string access_token { get; set; }\n  }\n  public class AppVersion\n  {\n      public string Id { get; set; }\n      public string ProfileId { get; set; }\n      public string AppResourceReferenceId { get; set; }\n      public string AppIconResourceReferenceId { get; set; }\n      public string Name { get; set; }\n      public string UniqueName { get; set; }\n      public string SignedCertName { get; set; }\n      public string Version { get; set; }\n      public string VersionCode { get; set; }\n      public int PublishType { get; set; }\n      public DateTime? PublishDate { get; set; }\n      public string PublishDateStr { get; set; }\n      public int PlatformType { get; set; }\n      public string FileName { get; set; }\n      public long FileSize { get; set; }\n      public int DownloadCount { get; set; }\n      public string Summary { get; set; }\n      public string ReleaseNotes { get; set; }\n      public DateTime? LatestNotificationDate { get; set; }\n      public DateTime CreateDate { get; set; }\n      public DateTime? UpdateDate { get; set; }\n      public string BuildId { get; set; }\n      public string AppIconUrl { get; set; }\n      public bool IsDownloadLimitExceeded { get; set; }\n      public int OrganizationDownloadCount { get; set; }\n      public int OrganizationDownloadLimit { get; set; }\n  }\n  public class AppVersionsResponse\n  {\n      public List<AppVersion> data { get; set; }\n  }\n\n  public enum PublishType\n  {\n      NotPublished = 0,\n      Beta,\n      Live,\n  }\n}\n"})]})]}),"\n",(0,r.jsx)(n.h3,{id:"how-to-prompt-an-alert-and-install-the-latest-release",children:"How to Prompt an Alert and Install the Latest Release"}),"\n",(0,r.jsx)(n.p,{children:"After obtaining the download URL for a newer version, display an alert with options to update or cancel. Customize the alert based on your requirements, such as omitting the cancel button for mandatory updates."}),"\n",(0,r.jsxs)(a.A,{defaultValue:"swift",values:[{label:"Swift",value:"swift"},{label:"Android",value:"android"},{label:"React Native",value:"react-native"},{label:"MAUI",value:"maui"}],children:[(0,r.jsx)(o.A,{value:"android",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-java",children:'\nprivate AppService appService = new AppService();\n\n@Override\nprotected void onCreate(Bundle savedInstanceState) {\n    super.onCreate(savedInstanceState);\n\n    new GetAccessTokenTask().execute(Environment.PAT);\n}\n\nprivate void showUpdateDialog(final String storeURL, final String profileId, final AppVersion appVersion, final String accessToken, final String userEmail) {\n    new AlertDialog.Builder(this)\n            .setTitle("Update Available")\n            .setMessage(appVersion.getVersion() + " version is available. Do you want to update?")\n            .setPositiveButton("Update", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    String baseDownloadURL = "https://%s/api/app-versions/%s/download-version/%s/user/%s";\n                    Uri downloadURL =  Uri.parse(String.format(baseDownloadURL, storeURL, appVersion.getId(), accessToken, userEmail));\n                    Intent intent = new Intent(Intent.ACTION_VIEW, downloadURL);\n                    startActivity(intent);\n                }\n            })\n            .setNegativeButton("Cancel", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    // Code to run when "Cancel" is pressed\n                    dialog.dismiss();\n                }\n            })\n            .show();\n}\n'})})}),(0,r.jsx)(o.A,{value:"swift",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-swift",children:'import SwiftUI\n\n@main\nstruct AppcircleApp: App {\n    @State private var updateURL: URL?\n    @State private var showAlert: Bool = false\n\n\n    var body: some Scene {\n        WindowGroup {\n            ContentView()\n                .onAppear {\n                    let updateChecker = UpdateChecker()\n                    Task {\n                        if let updateURL = try await updateChecker.checkForUpdate(secret: Environments.secret, profileId: Environments.profileId, storeURL: Environments.storeURL, userEmail: "USER_EMAIL") {\n                            self.updateURL = updateURL\n                            self.showAlert.toggle()\n                        }\n                    }\n                }\n                .alert(isPresented: $showAlert) {\n                    Alert(\n                        title: Text("Update Available"),\n                        message: Text("A new version is available Would you like to update?"),\n                        primaryButton: .default(Text("Update"), action: {\n                            UIApplication.shared.open(self.updateURL!) { isOpened in\n                                print("Application Opened")\n                            }\n                        }),\n                        secondaryButton: .cancel(Text("Cancel"), action: {\n                            // Handle the cancel action\n                            print("User canceled the update")\n                        })\n                    )\n                }\n        }\n    }\n}\n'})})}),(0,r.jsx)(o.A,{value:"react-native",children:(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-js",children:"import DeviceInfo from 'react-native-device-info';\n\nuseEffect(() => {\n  const updateControl = async (currentVersion: string) => {\n    const updateInfo = await checkForUpdate({\n      iOSProfileId: Environment.IOS_PROFILE_ID,\n      androidProfileId: Environment.ANDROID_PROFILE_ID,\n      currentVersion,\n      userEmail: 'USER_EMAIL',\n    });\n    if (updateInfo && updateInfo.updateURL && updateInfo.version) {\n      Alert.alert(\n        'Update Available',\n        `${updateInfo.version} version is available.`,\n        [\n          {\n            text: 'Update',\n            onPress: () => {\n              console.log('updateInfo.updateURL', updateInfo.updateURL);\n              Linking.openURL(updateInfo.updateURL);\n            },\n          },\n          {\n            text: 'Cancel',\n          },\n        ],\n      );\n    }\n  };\n\n  const getCurrentAppVersion = async () => {\n    try {\n      const currentVersion = await DeviceInfo.getVersion();\n      const buildNumber = await DeviceInfo.getBuildNumber();\n      updateControl(currentVersion);\n    } catch (error) {\n      console.error('Failed to get app version:', error);\n    }\n  };\n\n  getCurrentAppVersion();\n}, []);\n"})})}),(0,r.jsx)(o.A,{value:"maui",children:(0,r.jsx)(p.A,{language:"csharp",children:'\nusing MAUI_IN_APP.Helpers;\n\nnamespace MAUI_IN_APP;\n\npublic partial class MainPage : ContentPage\n{\npublic MainPage()\n{\nInitializeComponent();\n}\nprotected override async void OnAppearing()\n{\nbase.OnAppearing();\nawait UpdateControl();\n}\npublic async Task UpdateControl()\n{\nvar currentVersion = AppInfo.VersionString;\nvar updateInfo = await InAppUpdateHelper.CheckForUpdate(currentVersion, "USER_EMAIL");\n\n    \tif (updateInfo?.DownloadUrl != null && await Launcher.CanOpenAsync(updateInfo.DownloadUrl))\n    \t{\n    \t\tbool result = await DisplayAlert("Update Available",$"{updateInfo.Version} version is available.", "Update","Cancel");\n    \t\tif (result)\n    \t\t{\n    \t\t\tawait Launcher.OpenAsync(updateInfo.DownloadUrl);\n    \t\t}\n    \t}\n    }\n\n}\n\n'})})]}),"\n",(0,r.jsx)(n.admonition,{type:"caution",children:(0,r.jsx)(n.p,{children:"With API Level 29 and above, the in-app update experience must be managed by allowing users to download and manually install the update due to increased security restrictions."})})]})}function m(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(g,{...e})}):g(e)}},19365:(e,n,t)=>{t.d(n,{A:()=>a});t(96540);var i=t(18215);const r={tabItem:"tabItem_Ymn6"};var s=t(74848);function a(e){let{children:n,hidden:t,className:a}=e;return(0,s.jsx)("div",{role:"tabpanel",className:(0,i.A)(r.tabItem,a),hidden:t,children:n})}},11470:(e,n,t)=>{t.d(n,{A:()=>y});var i=t(96540),r=t(18215),s=t(23104),a=t(56347),o=t(205),p=t(57485),l=t(31682),c=t(70679);function u(e){return i.Children.toArray(e).filter((e=>"\n"!==e)).map((e=>{if(!e||(0,i.isValidElement)(e)&&function(e){const{props:n}=e;return!!n&&"object"==typeof n&&"value"in n}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}function d(e){const{values:n,children:t}=e;return(0,i.useMemo)((()=>{const e=n??function(e){return u(e).map((e=>{let{props:{value:n,label:t,attributes:i,default:r}}=e;return{value:n,label:t,attributes:i,default:r}}))}(t);return function(e){const n=(0,l.XI)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function h(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function g(e){let{queryString:n=!1,groupId:t}=e;const r=(0,a.W6)(),s=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,p.aZ)(s),(0,i.useCallback)((e=>{if(!s)return;const n=new URLSearchParams(r.location.search);n.set(s,e),r.replace({...r.location,search:n.toString()})}),[s,r])]}function m(e){const{defaultValue:n,queryString:t=!1,groupId:r}=e,s=d(e),[a,p]=(0,i.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!h({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const i=t.find((e=>e.default))??t[0];if(!i)throw new Error("Unexpected error: 0 tabValues");return i.value}({defaultValue:n,tabValues:s}))),[l,u]=g({queryString:t,groupId:r}),[m,v]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[r,s]=(0,c.Dv)(t);return[r,(0,i.useCallback)((e=>{t&&s.set(e)}),[t,s])]}({groupId:r}),f=(()=>{const e=l??m;return h({value:e,tabValues:s})?e:null})();(0,o.A)((()=>{f&&p(f)}),[f]);return{selectedValue:a,selectValue:(0,i.useCallback)((e=>{if(!h({value:e,tabValues:s}))throw new Error(`Can't select invalid tab value=${e}`);p(e),u(e),v(e)}),[u,v,s]),tabValues:s}}var v=t(92303);const f={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};var b=t(74848);function A(e){let{className:n,block:t,selectedValue:i,selectValue:a,tabValues:o}=e;const p=[],{blockElementScrollPositionUntilNextRender:l}=(0,s.a_)(),c=e=>{const n=e.currentTarget,t=p.indexOf(n),r=o[t].value;r!==i&&(l(n),a(r))},u=e=>{let n=null;switch(e.key){case"Enter":c(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;n=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;n=p[t]??p[p.length-1];break}}n?.focus()};return(0,b.jsx)("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,r.A)("tabs",{"tabs--block":t},n),children:o.map((e=>{let{value:n,label:t,attributes:s}=e;return(0,b.jsx)("li",{role:"tab",tabIndex:i===n?0:-1,"aria-selected":i===n,ref:e=>p.push(e),onKeyDown:u,onClick:c,...s,className:(0,r.A)("tabs__item",f.tabItem,s?.className,{"tabs__item--active":i===n}),children:t??n},n)}))})}function I(e){let{lazy:n,children:t,selectedValue:s}=e;const a=(Array.isArray(t)?t:[t]).filter(Boolean);if(n){const e=a.find((e=>e.props.value===s));return e?(0,i.cloneElement)(e,{className:(0,r.A)("margin-top--md",e.props.className)}):null}return(0,b.jsx)("div",{className:"margin-top--md",children:a.map(((e,n)=>(0,i.cloneElement)(e,{key:n,hidden:e.props.value!==s})))})}function x(e){const n=m(e);return(0,b.jsxs)("div",{className:(0,r.A)("tabs-container",f.tabList),children:[(0,b.jsx)(A,{...n,...e}),(0,b.jsx)(I,{...n,...e})]})}function y(e){const n=(0,v.A)();return(0,b.jsx)(x,{...e,children:u(e.children)},String(n))}},69678:(e,n,t)=>{t.d(n,{A:()=>r});t(96540);var i=t(74848);function r(e){let{url:n,alt:t}=e;return(0,i.jsx)("img",{className:"screenshot",src:n,alt:t||"Screenshot"})}}}]);