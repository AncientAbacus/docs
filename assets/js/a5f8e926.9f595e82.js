"use strict";(self.webpackChunkappcircle_docusaurus=self.webpackChunkappcircle_docusaurus||[]).push([[46301],{93978:(e,i,n)=>{n.d(i,{Ay:()=>l,RM:()=>r});var o=n(74848),s=n(28453);const r=[{value:"Need help?",id:"need-help",level:3}];function t(e){const i={a:"a",h3:"h3",...(0,s.R)(),...e.components},{ExternalUrlRef:n}=i;return n||function(e,i){throw new Error("Expected "+(i?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("ExternalUrlRef",!0),(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(i.h3,{id:"need-help",children:"Need help?"}),"\n",(0,o.jsx)("p",{class:"need-help",children:"Get help from Appcircle's support team, or see how others are using Appcircle by joining our Slack Channel."}),"\n",(0,o.jsx)("p",{class:"need-help",children:(0,o.jsx)(i.a,{href:"https://join.slack.com/t/appcircleio/signup",children:(0,o.jsx)(n,{url:"https://join.slack.com/t/appcircleio/signup",title:"Slack",description:"No description available",image:"https://cdn.appcircle.io/docs/assets/appcircle-logo.png"})})})]})}function l(e={}){const{wrapper:i}={...(0,s.R)(),...e.components};return i?(0,o.jsx)(i,{...e,children:(0,o.jsx)(t,{...e})}):t(e)}},29519:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>d,contentTitle:()=>a,default:()=>h,frontMatter:()=>l,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"build/platform-build-guides/building-xamarin-apps","title":"Building Xamarin Apps","description":"Learn how to build a Xamarin app on Appcircle","source":"@site/docs/build/platform-build-guides/building-xamarin-apps.md","sourceDirName":"build/platform-build-guides","slug":"/build/platform-build-guides/building-xamarin-apps","permalink":"/build/platform-build-guides/building-xamarin-apps","draft":false,"unlisted":false,"editUrl":"https://github.com/appcircleio/appcircle-docusaurus/tree/master/docs/build/platform-build-guides/building-xamarin-apps.md","tags":[{"inline":false,"label":"build","permalink":"/tags/build","description":"Description for build"},{"inline":false,"label":"platform build guides","permalink":"/tags/platform-build-guides","description":"Description for platform build guides"},{"inline":false,"label":".net","permalink":"/tags/net","description":"Description for .net"},{"inline":false,"label":"xamarin","permalink":"/tags/xamarin","description":"Description for xamarin"},{"inline":false,"label":"custom scripts","permalink":"/tags/custom-scripts","description":"Description for custom scripts"}],"version":"current","sidebarPosition":10,"frontMatter":{"title":"Building Xamarin Apps","description":"Learn how to build a Xamarin app on Appcircle","tags":["build","platform build guides",".net","xamarin","custom scripts"],"sidebar_position":10},"sidebar":"mySidebar","previous":{"title":"Building .NET MAUI Apps","permalink":"/build/platform-build-guides/building-dotnet-maui-apps"},"next":{"title":"Post-Build Operations","permalink":"/build/post-build-operations/"}}');var s=n(74848),r=n(28453),t=n(93978);const l={title:"Building Xamarin Apps",description:"Learn how to build a Xamarin app on Appcircle",tags:["build","platform build guides",".net","xamarin","custom scripts"],sidebar_position:10},a="Building Xamarin Apps",d={},c=[{value:"Xamarin Build for iOS",id:"xamarin-build-for-ios",level:3},{value:"Xamarin Build for Android",id:"xamarin-build-for-android",level:3},{value:"Next Steps",id:"next-steps",level:3},...t.RM];function p(e){const i={a:"a",admonition:"admonition",code:"code",h1:"h1",h3:"h3",header:"header",hr:"hr",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.header,{children:(0,s.jsx)(i.h1,{id:"building-xamarin-apps",children:"Building Xamarin Apps"})}),"\n",(0,s.jsxs)(i.p,{children:["This guide gives necessary information about the steps that should be followed to successfully build and publish a ",(0,s.jsx)(i.a,{href:"https://dotnet.microsoft.com/en-us/apps/xamarin",children:"Xamarin"})," app with Appcircle."]}),"\n",(0,s.jsx)(i.p,{children:"It's an introduction to the basic steps such as build, code signing, and app publishing. Although these steps are minimum requirements for a mobile app build pipeline, you should go on with other sections of the Appcircle documentation for numerous advanced CI/CD features."}),"\n",(0,s.jsxs)(i.p,{children:["If you don't have a Xamarin app already or want to follow the steps quickly for a fast evaluation, you can use the ",(0,s.jsx)(i.a,{href:"https://github.com/appcircleio/appcircle-sample-xamarin",children:"sample app"})," repository. To simulate a Xamarin repository, it will be good to clone the app folder and add it as a repository to your own Git provider."]}),"\n",(0,s.jsxs)(i.admonition,{type:"danger",children:[(0,s.jsxs)(i.p,{children:["As of May 1, 2024, Xamarin is no longer supported or updated by Microsoft. ",(0,s.jsx)(i.strong,{children:"Therefore, Appcircle does not officially support Xamarin and does not guarantee that all Xamarin projects will build without issues."})," See the ",(0,s.jsx)(i.a,{href:"https://dotnet.microsoft.com/en-us/platform/support/policy/xamarin",children:"Xamarin support policy"})," for details."]}),(0,s.jsx)(i.p,{children:"Some Appcircle features might not be supported for Xamarin build profiles on the dashboard, or you might need to do some extra customizations in the custom scripts to use them."}),(0,s.jsxs)(i.p,{children:["In this case, do not hesitate to ",(0,s.jsx)(i.a,{href:"https://appcircle.io/support/",children:"contact us"})," for support. We will do our best to support your build pipeline for Xamarin apps."]})]}),"\n",(0,s.jsx)(i.h3,{id:"xamarin-build-for-ios",children:"Xamarin Build for iOS"}),"\n",(0,s.jsx)(i.p,{children:"In order to build a Xamarin iOS app on Appcircle, follow the steps below."}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"1."})," ",(0,s.jsx)(i.a,{href:"/build/manage-the-connections/adding-a-build-profile",children:"Create"})," a new build profile for your app."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"iOS"})," should be selected as the ",(0,s.jsx)(i.strong,{children:"Target Operating System"}),", and ",(0,s.jsx)(i.code,{children:"Objective-C/Swift"})," should be selected as the ",(0,s.jsx)(i.strong,{children:"Target Platform"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"2."})," Connect your repository using a compatible connection method."]}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:["You can disable the ",(0,s.jsx)(i.strong,{children:"Autofill"})," toggle or ignore the output of the ",(0,s.jsx)(i.strong,{children:"Autofill"})," run since it does not support Xamarin app metadata processing."]})}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["As of now, Appcircle does not have a sample repository for Xamarin apps. So the ",(0,s.jsx)(i.strong,{children:"quick start using the sample repository"})," option will not work for Xamarin build profiles. You should use your own repository."]})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"3."})," Configure ",(0,s.jsx)(i.a,{href:"/signing-identities/apple-certificates",children:"Apple Certificates"})," and ",(0,s.jsx)(i.a,{href:"/signing-identities/apple-profiles",children:"Apple Profiles"})," using the ",(0,s.jsx)(i.strong,{children:"Signing Identities"})," module on Appcircle."]}),"\n",(0,s.jsx)(i.p,{children:"These certificates and provisioning profiles will be used while building the signed app in the build pipeline."}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["Keep in mind that, in order to use iOS Signing Identities in the build pipeline, the ",(0,s.jsx)(i.a,{href:"/workflows",children:"workflow"})," should also have an ",(0,s.jsx)(i.a,{href:"/workflows/ios-specific-workflow-steps/install-certificates-provisions",children:(0,s.jsx)(i.strong,{children:"Install Certificates & Profiles"})})," step."]})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"4."})," In the ",(0,s.jsx)(i.a,{href:"/build/build-process-management/build-profile-configuration",children:"Build Profile Configuration"}),", open the ",(0,s.jsx)(i.strong,{children:"Config"})," tab and edit the settings below."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"XCODE VERSION"}),": Select the Xcode version that's compatible with your app. For instance, ",(0,s.jsx)(i.code,{children:"14.3.x"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"XCODE PROJECT OR WORKSPACE PATH"}),": The custom script we will use does not require a valid Xcode project path. If you haven't exported your Xamarin project to Xcode yet, you can provide a temporary path. For instance, ",(0,s.jsx)(i.code,{children:"temp.xcodeproj"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:"BUILD SCHEME"}),": Enter a build scheme from your project for the release configuration. For instance, ",(0,s.jsx)(i.code,{children:"TempDev"}),"."]}),"\n"]}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["Keep in mind that, in order to switch to the selected Xcode version in the build pipeline, the ",(0,s.jsx)(i.a,{href:"/workflows",children:"workflow"})," should also have an ",(0,s.jsx)(i.a,{href:"/workflows/ios-specific-workflow-steps/xcode-select",children:(0,s.jsx)(i.strong,{children:"Xcode Select"})})," step."]})}),"\n",(0,s.jsxs)(i.admonition,{type:"caution",children:[(0,s.jsxs)(i.p,{children:["The selected pool in the ",(0,s.jsx)(i.strong,{children:"SELECT A POOL"})," list should be the ",(0,s.jsx)(i.code,{children:"Appcircle Standard macOS Pool (arm64)"})," for the Appcircle Cloud or a pool that has ",(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"arm64"})})," macOS runners for the self-hosted Appcircle."]}),(0,s.jsx)(i.p,{children:"Intel-based runners are not supported or documented as of now, and you might need extra customizations done in the custom scripts."})]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"5."})," In the ",(0,s.jsx)(i.a,{href:"/build/build-process-management/build-profile-configuration",children:"Build Profile Configuration"}),", open the ",(0,s.jsx)(i.strong,{children:"Signing"})," tab and ",(0,s.jsx)(i.strong,{children:"add provisioning profile"})," by selecting from the list of Signing Identities."]}),"\n",(0,s.jsx)(i.admonition,{type:"caution",children:(0,s.jsxs)(i.p,{children:["Currently, ",(0,s.jsx)(i.strong,{children:"Automatic Code Signing"})," is not supported for iOS Xamarin builds. For this reason, do not enable that toggle and go on with manual code signing as mentioned above."]})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"6."})," In your ",(0,s.jsx)(i.a,{href:"/workflows",children:"workflow"}),", use the below custom script as a replacement of the default ",(0,s.jsx)(i.strong,{children:"Xcodebuild for Devices"})," step. Remove the ",(0,s.jsx)(i.strong,{children:"CocoaPods Install"})," and ",(0,s.jsx)(i.strong,{children:"Increment Build and Version Number"})," steps from your workflow."]}),"\n",(0,s.jsxs)(i.admonition,{type:"info",children:[(0,s.jsxs)(i.p,{children:["When you remove the ",(0,s.jsx)(i.strong,{children:"Xcodebuild for Devices"})," step from the default workflow, the workflow editor might give some errors or warnings for other components that depend on the ",(0,s.jsx)(i.strong,{children:"Xcodebuild for Devices"})," step."]}),(0,s.jsxs)(i.p,{children:["Just ignore them and go on with the ",(0,s.jsx)(i.strong,{children:"Save"})," button when you remove the ",(0,s.jsx)(i.strong,{children:"Xcodebuild for Devices"})," step in the workflow editor."]}),(0,s.jsxs)(i.p,{children:["As an alternative, you can disable the ",(0,s.jsx)(i.strong,{children:"Step Execution Active"})," toggle in ",(0,s.jsx)(i.strong,{children:"Xcodebuild for Devices"})," step details, which will also make it inactive in the build pipeline."]})]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'set -e\n\nMONO_VERSION="6.12.0.206"\nDOTNET_VERSION="8.0.402"\nXAMARIN_IOS_SDK_DOWNLOAD_URL="https://download.visualstudio.microsoft.com/download/pr/ceb0ea3f-4db8-46b4-8dc3-8049d27c0107/3960868aa9b1946a6c77668c3f3334ee/xamarin.ios-16.4.0.23.pkg"\nPROJECT_ROOT_DIR="$AC_REPOSITORY_DIR"\nIOS_PROJECT_DIR="AppcircleXamarin.iOS/AppcircleXamarin.iOS.csproj"\nAPPLE_PROFILE_NAME="Adhoc Appcircle Sample"\nAPPLE_CERTIFICATE_NAME="Apple Distribution: APPCIRCLE, INC. (8U2Z24R99J)"\n\n\nAPPLE_CERTIFICATE_ID=$(security find-identity -v -p codesigning | grep "$APPLE_CERTIFICATE_NAME" | awk \'{print $2}\' | head -n 1)\nAPPLE_PROFILE_ID=$(for profile in ~/Library/MobileDevice/Provisioning\\ Profiles/*.mobileprovision; do\n    if security cms -D -i "$profile" | grep -q "<key>Name</key>" && \\\n       security cms -D -i "$profile" | grep -A 1 "<key>Name</key>" | grep -q "$APPLE_PROFILE_NAME"; then\n        security cms -D -i "$profile" | grep "<key>UUID</key>" -A 1 | grep "<string>" | awk -F \'[<>]\' \'{print $3}\'\n    fi\ndone)\n\ncurl -sS -O https://cdn.appcircle.io/docs/assets/mono_install.sh\nchmod u+x mono_install.sh\n./mono_install.sh --version $MONO_VERSION\nexport PATH=$PATH:/Library/Frameworks/Mono.framework/Versions/Current/bin/\n\ncurl -sS -O https://cdn.appcircle.io/dotnet-install.sh\nchmod u+x dotnet-install.sh\nsudo ./dotnet-install.sh --version $DOTNET_VERSION --install-dir /usr/local/share/dotnet\nexport PATH=$PATH:/usr/local/share/dotnet:$HOME/.dotnet/tools\n\ndotnet tool install --global boots\nsudo boots $XAMARIN_IOS_SDK_DOWNLOAD_URL\n\ncd $PROJECT_ROOT_DIR\nnuget restore $IOS_PROJECT_DIR\ndotnet restore\n\nmsbuild $IOS_PROJECT_DIR /t:Build /p:Configuration=Release /p:Platform=iPhone /p:BuildIpa=true /p:OutputPath=$AC_OUTPUT_DIR /p:KeychainPath=$AC_KEYCHAIN_PATH /p:KeychainPassword=$AC_KEYCHAIN_PASSWORD /p:CodesignKey=$APPLE_CERTIFICATE_ID /p:ProvisioningProfileId=$APPLE_PROFILE_ID\n\n\n'})}),"\n",(0,s.jsx)(i.p,{children:"The custom script above does the following operations in order to build a Xamarin iOS app:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Install ",(0,s.jsx)(i.a,{href:"https://www.mono-project.com/",children:"Mono"})]}),"\n",(0,s.jsx)(i.li,{children:"Install .NET SDK"}),"\n",(0,s.jsx)(i.li,{children:"Install Xamarin iOS SDK"}),"\n",(0,s.jsx)(i.li,{children:"Build the project with dependencies"}),"\n",(0,s.jsx)(i.li,{children:"Publish the app for deployment"}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The custom script has some ",(0,s.jsx)(i.strong,{children:"variables that should be changed or customized"})," for your pipeline."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"MONO_VERSION"})}),": You can select a Mono version that's compatible with your project or solution. See ",(0,s.jsx)(i.a,{href:"https://www.mono-project.com/",children:"here"})," for details."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"DOTNET_VERSION"})}),": You can select a .NET SDK version that's compatible with your project or solution. See ",(0,s.jsx)(i.a,{href:"https://versionsof.net/",children:"here"})," for details."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"XAMARIN_IOS_SDK_DOWNLOAD_URL"})}),": The download link for the Xamarin iOS SDK version you want to install. Copy the link for the version from ",(0,s.jsx)(i.a,{href:"https://github.com/xamarin/xamarin-macios/blob/main/DOWNLOADS.md",children:"here"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"PROJECT_ROOT_DIR"})}),": The location of your ",(0,s.jsx)(i.code,{children:"<YourProject>.sln"})," file. Your Git repository is typically saved within the ",(0,s.jsx)(i.code,{children:"$AC_REPOSITORY_DIR"})," inside the runner. However, your .sln file may be located in a subdirectory of this folder. Please specify this. For instance, ",(0,s.jsx)(i.code,{children:"$AC_REPOSITORY_DIR/src"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"IOS_PROJECT_DIR"})}),": The location of the ",(0,s.jsx)(i.code,{children:"<YOUR_IOS_PROJECT>.csproj"})," file is required for performing iOS-specific builds. In this script, it is ",(0,s.jsx)(i.code,{children:"AppcircleXamarin.iOS/AppcircleXamarin.iOS.csproj"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"APPLE_CERTIFICATE_NAME"})}),": You should use the certificate name as seen on the ",(0,s.jsx)(i.a,{href:"/signing-identities/apple-certificates",children:"Apple Certificates"})," list. It should also be compatible with the selected provisioning profile that you have selected from the  ",(0,s.jsx)(i.a,{href:"/build/build-process-management/build-profile-configuration",children:"Build Profile Configuration"})," ",(0,s.jsx)(i.strong,{children:"Signing"})," tab."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"APPLE_PROFILE_NAME"})}),": It should be the name of the selected provisioning profile at the ",(0,s.jsx)(i.a,{href:"/build/build-process-management/build-profile-configuration",children:"Build Profile Configuration"})," ",(0,s.jsx)(i.strong,{children:"Signing"})," tab. You can also see the name on the ",(0,s.jsx)(i.a,{href:"/signing-identities/apple-profiles",children:"Apple Profiles"})," list."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["When the build pipeline is completed successfully, you will see the signed ",(0,s.jsx)(i.code,{children:".ipa"})," in the ",(0,s.jsx)(i.a,{href:"/build/post-build-operations/after-a-build#download-artifacts",children:"build artifacts"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"xamarin-build-for-android",children:"Xamarin Build for Android"}),"\n",(0,s.jsx)(i.p,{children:"In order to build a Xamarin Android app on Appcircle, follow the steps below."}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"1."})," ",(0,s.jsx)(i.a,{href:"/build/manage-the-connections/adding-a-build-profile",children:"Create"})," a new build profile for your app."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.code,{children:"Android"})," should be selected as the ",(0,s.jsx)(i.strong,{children:"Target Operating System"}),", and ",(0,s.jsx)(i.code,{children:"Java/Kotlin"})," should be selected as the ",(0,s.jsx)(i.strong,{children:"Target Platform"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"2."})," Connect your repository using a compatible connection method."]}),"\n",(0,s.jsx)(i.admonition,{type:"tip",children:(0,s.jsxs)(i.p,{children:["You can disable the ",(0,s.jsx)(i.strong,{children:"Autofill"})," toggle or ignore the output of the ",(0,s.jsx)(i.strong,{children:"Autofill"})," run since it does not support Xamarin app metadata processing."]})}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["As of now, Appcircle does not have a sample repository for Xamarin apps. So the ",(0,s.jsx)(i.strong,{children:"quick start using the sample repository"})," option will not work for Xamarin build profiles. You should use your own repository."]})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"4."})," Add your keystore to ",(0,s.jsx)(i.a,{href:"/signing-identities/android-keystores",children:"Android Keystores"})," using the ",(0,s.jsx)(i.strong,{children:"Signing Identities"})," module on Appcircle."]}),"\n",(0,s.jsx)(i.p,{children:"These keystores will be used while building the signed app in the build pipeline."}),"\n",(0,s.jsx)(i.admonition,{type:"info",children:(0,s.jsxs)(i.p,{children:["Keep in mind that, in order to use Android Signing Identities in the build pipeline, the ",(0,s.jsx)(i.a,{href:"/workflows",children:"workflow"})," should also have an ",(0,s.jsx)(i.a,{href:"/workflows/android-specific-workflow-steps/android-sign",children:(0,s.jsx)(i.strong,{children:"Android Sign"})})," step."]})}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"5."})," In the ",(0,s.jsx)(i.a,{href:"/build/build-process-management/build-profile-configuration",children:"Build Profile Configuration"}),", open the ",(0,s.jsx)(i.strong,{children:"Signing"})," tab and select your app's keystore from the list of Signing Identities."]}),"\n",(0,s.jsxs)(i.p,{children:[(0,s.jsx)(i.strong,{children:"6."})," In your ",(0,s.jsx)(i.a,{href:"/workflows",children:"workflow"}),", use the below ",(0,s.jsx)(i.strong,{children:"Custom Script"})," as a replacement of the default ",(0,s.jsx)(i.strong,{children:"Android Build"})," step. Remove the ",(0,s.jsx)(i.strong,{children:"Android App Post-Processor"})," and ",(0,s.jsx)(i.strong,{children:"Increment Build and Version Number"})," steps from your workflow."]}),"\n",(0,s.jsxs)(i.admonition,{type:"info",children:[(0,s.jsxs)(i.p,{children:["When you remove the ",(0,s.jsx)(i.strong,{children:"Android Build"})," step from the workflow, the workflow editor might give some errors or warnings for other components that depend on the ",(0,s.jsx)(i.strong,{children:"Android Build"})," step."]}),(0,s.jsxs)(i.p,{children:["Just ignore them and go on with the ",(0,s.jsx)(i.strong,{children:"Save"})," button when you remove the ",(0,s.jsx)(i.strong,{children:"Android Build"})," step in the workflow editor."]}),(0,s.jsxs)(i.p,{children:["As an alternative, you can disable the ",(0,s.jsx)(i.strong,{children:"Step Execution Active"})," toggle in ",(0,s.jsx)(i.strong,{children:"Android Build"})," step details, which will also make it inactive in the build pipeline."]})]}),"\n",(0,s.jsx)(i.pre,{children:(0,s.jsx)(i.code,{className:"language-bash",children:'set -e\n\nMONO_VERSION="6.12.0.206"\nDOTNET_VERSION="8.0.402"\nXAMARIN_ANDROID_SDK_DOWNLOAD_URL="https://aka.ms/xamarin-android-commercial-d17-5-macos"\nPROJECT_ROOT_DIR="$AC_REPOSITORY_DIR"\nANDROID_PROJECT_DIR="AppcircleXamarin.Android/AppcircleXamarin.Android.csproj"\nANDROID_PACKAGE_FORMAT="apk"\n\ncurl -sS -O https://cdn.appcircle.io/docs/assets/mono_install.sh\nchmod u+x mono_install.sh\n./mono_install.sh --version $MONO_VERSION\nexport PATH=$PATH:/Library/Frameworks/Mono.framework/Versions/Current/bin/\n\ncurl -sS -O https://cdn.appcircle.io/dotnet-install.sh\nchmod u+x dotnet-install.sh\nsudo ./dotnet-install.sh --version $DOTNET_VERSION --install-dir /usr/local/share/dotnet\nexport PATH=$PATH:/usr/local/share/dotnet:$HOME/.dotnet/tools\n\ndotnet tool install --global boots\nsudo boots $XAMARIN_ANDROID_SDK_DOWNLOAD_URL\n\ncd $PROJECT_ROOT_DIR\nnuget restore $ANDROID_PROJECT_DIR\ndotnet restore\n\n\nmsbuild $ANDROID_PROJECT_DIR /t:Package /p:Configuration=Release /p:Platform=AnyCPU /p:AndroidPackageFormat=$ANDROID_PACKAGE_FORMAT /p:OutputPath=$AC_REPOSITORY_DIR/build/outputs\n\n\n# The code section below is for passing unsigned artifacts\n# to the Android Sign step. So it should not be customized.\n#\n# Changing it might cause incompatibility issues for the next step.\n$(which ruby) <<EOF\n\nrequire \'fileutils\'\n\ndef get_env_variable(key)\n    return (ENV[key] == nil || ENV[key] == "") ? nil : ENV[key]\nend\nac_repo_path = get_env_variable("AC_REPOSITORY_DIR") || abort(\'Missing repo path.\')\nac_output_folder = get_env_variable("AC_OUTPUT_DIR") || abort(\'Missing output folder.\')\n\nbuild_output_folder="#{ac_repo_path}/build/outputs"\n\nputs "Filtering artifacts: #{build_output_folder}/**/*.apk, #{build_output_folder}/**/*.aab"\n\napks = Dir.glob("#{build_output_folder}/**/*.apk")\naabs = Dir.glob("#{build_output_folder}/**/*.aab")\n\nFileUtils.cp apks, "#{ac_output_folder}"\nFileUtils.cp aabs, "#{ac_output_folder}"\n\napks = Dir.glob("#{ac_output_folder}/**/*.apk").join("|")\naabs = Dir.glob("#{ac_output_folder}/**/*.aab").join("|")\n\nputs "Exporting AC_APK_PATH=#{apks}"\nputs "Exporting AC_AAB_PATH=#{aabs}"\n\nopen(ENV[\'AC_ENV_FILE_PATH\'], \'a\') { |f|\n    f.puts "AC_APK_PATH=#{apks}"\n    f.puts "AC_AAB_PATH=#{aabs}"\n}\n\nexit 0\n\nEOF\n\n'})}),"\n",(0,s.jsx)(i.p,{children:"The custom script above does the following operations in order to build a Xamarin Android app:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Install ",(0,s.jsx)(i.a,{href:"https://www.mono-project.com/",children:"Mono"})]}),"\n",(0,s.jsx)(i.li,{children:"Install .NET SDK"}),"\n",(0,s.jsx)(i.li,{children:"Install Xamarin Android SDK"}),"\n",(0,s.jsx)(i.li,{children:"Build the project with dependencies"}),"\n",(0,s.jsx)(i.li,{children:"Publish the app for deployment"}),"\n",(0,s.jsxs)(i.li,{children:["Pass build outputs to ",(0,s.jsx)(i.strong,{children:"Android Sign"})," step"]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["The custom script has some ",(0,s.jsx)(i.strong,{children:"variables that should be changed or customized"})," for your pipeline."]}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"MONO_VERSION"})}),": You can select a Mono version that's compatible with your project or solution. See ",(0,s.jsx)(i.a,{href:"https://www.mono-project.com/",children:"here"})," for details."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"DOTNET_VERSION"})}),": You can select a .NET SDK version that's compatible with your project or solution. See ",(0,s.jsx)(i.a,{href:"https://versionsof.net/",children:"here"})," for details."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"XAMARIN_ANDROID_SDK_DOWNLOAD_URL"})}),": The download link for the Xamarin Android SDK version you want to install. Copy the link for the version from ",(0,s.jsx)(i.a,{href:"https://github.com/dotnet/android/blob/main/Documentation/previous-releases.md",children:"here"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"PROJECT_ROOT_DIR"})}),": The location of your ",(0,s.jsx)(i.code,{children:"<YourProject>.sln"})," file. Your Git repository is typically saved within the ",(0,s.jsx)(i.code,{children:"$AC_REPOSITORY_DIR"})," inside the runner. However, your .sln file may be located in a subdirectory of this folder. Please specify this. For instance, ",(0,s.jsx)(i.code,{children:"$AC_REPOSITORY_DIR/src"})]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"ANDROID_PROJECT_DIR"})}),": The location of the ",(0,s.jsx)(i.code,{children:"<YOUR_IOS_PROJECT>.csproj"})," file is required for performing iOS-specific builds. In this script, it is ",(0,s.jsx)(i.code,{children:"AppcircleXamarin.Android/AppcircleXamarin.Android.csproj"}),"."]}),"\n",(0,s.jsxs)(i.li,{children:[(0,s.jsx)(i.strong,{children:(0,s.jsx)(i.code,{children:"ANDROID_PACKAGE_FORMAT"})}),": Please specify the type of your application package. It can be either ",(0,s.jsx)(i.code,{children:"apk"})," or ",(0,s.jsx)(i.code,{children:"aab"}),"."]}),"\n"]}),"\n",(0,s.jsxs)(i.p,{children:["When the build pipeline is completed successfully, you will see the signed ",(0,s.jsx)(i.code,{children:".apk"})," or ",(0,s.jsx)(i.code,{children:".aab"})," in the ",(0,s.jsx)(i.a,{href:"/build/post-build-operations/after-a-build#download-artifacts",children:"build artifacts"}),"."]}),"\n",(0,s.jsx)(i.h3,{id:"next-steps",children:"Next Steps"}),"\n",(0,s.jsxs)(i.p,{children:["The document above has introduced the basic steps such as build, code signing, and app publishing for ",(0,s.jsx)(i.a,{href:"https://dotnet.microsoft.com/en-us/apps/xamarin",children:"Xamarin"})," apps on Appcircle."]}),"\n",(0,s.jsx)(i.p,{children:"Although these steps are the minimum requirements for a mobile app build pipeline, they are certainly not the end. Appcircle has some other advanced features that can help your mobile operations."}),"\n",(0,s.jsx)(i.p,{children:"We suggest you check out the following modules for specific use cases mentioned below:"}),"\n",(0,s.jsxs)(i.ul,{children:["\n",(0,s.jsxs)(i.li,{children:["Use ",(0,s.jsx)(i.a,{href:"/testing-distribution",children:"Testing Distribution"})," to deploy the Xamarin app to your tester groups to get feedback."]}),"\n",(0,s.jsxs)(i.li,{children:["Ready to release? Then ",(0,s.jsx)(i.a,{href:"/publish-module",children:"Publish"})," the Xamarin app to public stores such as Google Play, App Store, or Huawei App Gallery."]}),"\n",(0,s.jsxs)(i.li,{children:["Use the ",(0,s.jsx)(i.a,{href:"/enterprise-app-store",children:"Enterprise App Store"})," if you want to distribute the Xamarin app to your in-house or private users."]}),"\n"]}),"\n",(0,s.jsx)(i.hr,{}),"\n","\n",(0,s.jsx)(t.Ay,{})]})}function h(e={}){const{wrapper:i}={...(0,r.R)(),...e.components};return i?(0,s.jsx)(i,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},28453:(e,i,n)=>{n.d(i,{R:()=>t,x:()=>l});var o=n(96540);const s={},r=o.createContext(s);function t(e){const i=o.useContext(r);return o.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function l(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:t(e.components),o.createElement(r.Provider,{value:i},e.children)}}}]);